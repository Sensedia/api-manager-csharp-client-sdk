/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccessTokensApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve access token total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        long? CountUsingGET10 (string sensediaAuth = null);

        /// <summary>
        /// Retrieve access token total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountUsingGET10WithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Remove a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns></returns>
        void RemoveAuthTokenUsingDELETE1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Remove a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAuthTokenUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrive changelog per access token id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        List<ChangeLogBean> RetrieveAuthTokenChangeLogUsingGET1 (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per access token id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        ApiResponse<List<ChangeLogBean>> RetrieveAuthTokenChangeLogUsingGET1WithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Find access token by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>AccessToken</returns>
        AccessToken RetriveAuthTokenByCodeUsingGET1 (string code, string sensediaAuth = null);

        /// <summary>
        /// Find access token by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> RetriveAuthTokenByCodeUsingGET1WithHttpInfo (string code, string sensediaAuth = null);
        /// <summary>
        /// Find access token list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>List&lt;AccessToken&gt;</returns>
        List<AccessToken> RetriveAuthTokenUsingGET1 (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null);

        /// <summary>
        /// Find access token list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>ApiResponse of List&lt;AccessToken&gt;</returns>
        ApiResponse<List<AccessToken>> RetriveAuthTokenUsingGET1WithHttpInfo (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null);
        /// <summary>
        /// Create a new access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>AccessToken</returns>
        AccessToken SaveAuthTokenUsingPOST1 (string sensediaAuth = null, AccessToken bean = null);

        /// <summary>
        /// Create a new access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> SaveAuthTokenUsingPOST1WithHttpInfo (string sensediaAuth = null, AccessToken bean = null);
        /// <summary>
        /// Update a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse UpdateAuthTokenUsingPUT1 (string id, string sensediaAuth = null, AccessToken bean = null);

        /// <summary>
        /// Update a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> UpdateAuthTokenUsingPUT1WithHttpInfo (string id, string sensediaAuth = null, AccessToken bean = null);
        /// <summary>
        /// Validate partial access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>Object</returns>
        Object ValidatePartialAccessTokenUsingPOST1 (string sensediaAuth = null, AccessToken bean = null);

        /// <summary>
        /// Validate partial access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ValidatePartialAccessTokenUsingPOST1WithHttpInfo (string sensediaAuth = null, AccessToken bean = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve access token total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountUsingGET10Async (string sensediaAuth = null);

        /// <summary>
        /// Retrieve access token total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET10AsyncWithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Remove a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAuthTokenUsingDELETE1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Remove a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAuthTokenUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrive changelog per access token id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        System.Threading.Tasks.Task<List<ChangeLogBean>> RetrieveAuthTokenChangeLogUsingGET1Async (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per access token id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> RetrieveAuthTokenChangeLogUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Find access token by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> RetriveAuthTokenByCodeUsingGET1Async (string code, string sensediaAuth = null);

        /// <summary>
        /// Find access token by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> RetriveAuthTokenByCodeUsingGET1AsyncWithHttpInfo (string code, string sensediaAuth = null);
        /// <summary>
        /// Find access token list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>Task of List&lt;AccessToken&gt;</returns>
        System.Threading.Tasks.Task<List<AccessToken>> RetriveAuthTokenUsingGET1Async (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null);

        /// <summary>
        /// Find access token list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AccessToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccessToken>>> RetriveAuthTokenUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null);
        /// <summary>
        /// Create a new access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> SaveAuthTokenUsingPOST1Async (string sensediaAuth = null, AccessToken bean = null);

        /// <summary>
        /// Create a new access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> SaveAuthTokenUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, AccessToken bean = null);
        /// <summary>
        /// Update a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> UpdateAuthTokenUsingPUT1Async (string id, string sensediaAuth = null, AccessToken bean = null);

        /// <summary>
        /// Update a access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> UpdateAuthTokenUsingPUT1AsyncWithHttpInfo (string id, string sensediaAuth = null, AccessToken bean = null);
        /// <summary>
        /// Validate partial access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ValidatePartialAccessTokenUsingPOST1Async (string sensediaAuth = null, AccessToken bean = null);

        /// <summary>
        /// Validate partial access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidatePartialAccessTokenUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, AccessToken bean = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccessTokensApi : IAccessTokensApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccessTokensApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccessTokensApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve access token total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        public long? CountUsingGET10 (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = CountUsingGET10WithHttpInfo(sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve access token total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountUsingGET10WithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/access-tokens/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Retrieve access token total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountUsingGET10Async (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = await CountUsingGET10AsyncWithHttpInfo(sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve access token total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET10AsyncWithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/access-tokens/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Remove a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns></returns>
        public void RemoveAuthTokenUsingDELETE1 (string id, string sensediaAuth = null)
        {
             RemoveAuthTokenUsingDELETE1WithHttpInfo(id, sensediaAuth);
        }

        /// <summary>
        /// Remove a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveAuthTokenUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensApi->RemoveAuthTokenUsingDELETE1");

            var localVarPath = "/access-tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAuthTokenUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAuthTokenUsingDELETE1Async (string id, string sensediaAuth = null)
        {
             await RemoveAuthTokenUsingDELETE1AsyncWithHttpInfo(id, sensediaAuth);

        }

        /// <summary>
        /// Remove a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAuthTokenUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensApi->RemoveAuthTokenUsingDELETE1");

            var localVarPath = "/access-tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAuthTokenUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrive changelog per access token id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        public List<ChangeLogBean> RetrieveAuthTokenChangeLogUsingGET1 (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = RetrieveAuthTokenChangeLogUsingGET1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive changelog per access token id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        public ApiResponse< List<ChangeLogBean> > RetrieveAuthTokenChangeLogUsingGET1WithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensApi->RetrieveAuthTokenChangeLogUsingGET1");

            var localVarPath = "/access-tokens/{id}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAuthTokenChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Retrive changelog per access token id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChangeLogBean>> RetrieveAuthTokenChangeLogUsingGET1Async (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = await RetrieveAuthTokenChangeLogUsingGET1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive changelog per access token id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> RetrieveAuthTokenChangeLogUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensApi->RetrieveAuthTokenChangeLogUsingGET1");

            var localVarPath = "/access-tokens/{id}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAuthTokenChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Find access token by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>AccessToken</returns>
        public AccessToken RetriveAuthTokenByCodeUsingGET1 (string code, string sensediaAuth = null)
        {
             ApiResponse<AccessToken> localVarResponse = RetriveAuthTokenByCodeUsingGET1WithHttpInfo(code, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find access token by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public ApiResponse< AccessToken > RetriveAuthTokenByCodeUsingGET1WithHttpInfo (string code, string sensediaAuth = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AccessTokensApi->RetriveAuthTokenByCodeUsingGET1");

            var localVarPath = "/access-tokens/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetriveAuthTokenByCodeUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
        }

        /// <summary>
        /// Find access token by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> RetriveAuthTokenByCodeUsingGET1Async (string code, string sensediaAuth = null)
        {
             ApiResponse<AccessToken> localVarResponse = await RetriveAuthTokenByCodeUsingGET1AsyncWithHttpInfo(code, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find access token by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessToken>> RetriveAuthTokenByCodeUsingGET1AsyncWithHttpInfo (string code, string sensediaAuth = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AccessTokensApi->RetriveAuthTokenByCodeUsingGET1");

            var localVarPath = "/access-tokens/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetriveAuthTokenByCodeUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
        }

        /// <summary>
        /// Find access token list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>List&lt;AccessToken&gt;</returns>
        public List<AccessToken> RetriveAuthTokenUsingGET1 (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {
             ApiResponse<List<AccessToken>> localVarResponse = RetriveAuthTokenUsingGET1WithHttpInfo(sensediaAuth, code, owner, status, expiresIn, refreshToken, scope, keyword, actualPage, pageSize, authIds, beginDate, endDate, extraFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find access token list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>ApiResponse of List&lt;AccessToken&gt;</returns>
        public ApiResponse< List<AccessToken> > RetriveAuthTokenUsingGET1WithHttpInfo (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {

            var localVarPath = "/access-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (owner != null) localVarQueryParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (expiresIn != null) localVarQueryParams.Add("expiresIn", Configuration.ApiClient.ParameterToString(expiresIn)); // query parameter
            if (refreshToken != null) localVarQueryParams.Add("refreshToken", Configuration.ApiClient.ParameterToString(refreshToken)); // query parameter
            if (scope != null) localVarQueryParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // query parameter
            if (keyword != null) localVarQueryParams.Add("keyword", Configuration.ApiClient.ParameterToString(keyword)); // query parameter
            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (authIds != null) localVarQueryParams.Add("authIds", Configuration.ApiClient.ParameterToString(authIds)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (extraFields != null) localVarQueryParams.Add("extraFields", Configuration.ApiClient.ParameterToString(extraFields)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetriveAuthTokenUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccessToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccessToken>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccessToken>)));
        }

        /// <summary>
        /// Find access token list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>Task of List&lt;AccessToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccessToken>> RetriveAuthTokenUsingGET1Async (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {
             ApiResponse<List<AccessToken>> localVarResponse = await RetriveAuthTokenUsingGET1AsyncWithHttpInfo(sensediaAuth, code, owner, status, expiresIn, refreshToken, scope, keyword, actualPage, pageSize, authIds, beginDate, endDate, extraFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find access token list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="code">code (optional)</param>
        /// <param name="owner">owner (optional)</param>
        /// <param name="status">staus(ACTIVE, REVOKED, EXPIRED) (optional)</param>
        /// <param name="expiresIn">Expires in millisecond (optional)</param>
        /// <param name="refreshToken">Refresh code (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="keyword">Keyword to find between code or owner (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="authIds">Id access token separated by space. Ex:(1 3 6 8) (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="extraFields">Extra field separated by comma (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AccessToken&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AccessToken>>> RetriveAuthTokenUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string code = null, string owner = null, string status = null, long? expiresIn = null, string refreshToken = null, string scope = null, string keyword = null, int? actualPage = null, int? pageSize = null, string authIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {

            var localVarPath = "/access-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (owner != null) localVarQueryParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (expiresIn != null) localVarQueryParams.Add("expiresIn", Configuration.ApiClient.ParameterToString(expiresIn)); // query parameter
            if (refreshToken != null) localVarQueryParams.Add("refreshToken", Configuration.ApiClient.ParameterToString(refreshToken)); // query parameter
            if (scope != null) localVarQueryParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // query parameter
            if (keyword != null) localVarQueryParams.Add("keyword", Configuration.ApiClient.ParameterToString(keyword)); // query parameter
            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (authIds != null) localVarQueryParams.Add("authIds", Configuration.ApiClient.ParameterToString(authIds)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (extraFields != null) localVarQueryParams.Add("extraFields", Configuration.ApiClient.ParameterToString(extraFields)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetriveAuthTokenUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccessToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccessToken>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccessToken>)));
        }

        /// <summary>
        /// Create a new access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>AccessToken</returns>
        public AccessToken SaveAuthTokenUsingPOST1 (string sensediaAuth = null, AccessToken bean = null)
        {
             ApiResponse<AccessToken> localVarResponse = SaveAuthTokenUsingPOST1WithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public ApiResponse< AccessToken > SaveAuthTokenUsingPOST1WithHttpInfo (string sensediaAuth = null, AccessToken bean = null)
        {

            var localVarPath = "/access-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAuthTokenUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
        }

        /// <summary>
        /// Create a new access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> SaveAuthTokenUsingPOST1Async (string sensediaAuth = null, AccessToken bean = null)
        {
             ApiResponse<AccessToken> localVarResponse = await SaveAuthTokenUsingPOST1AsyncWithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to create a new access token. (optional)</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessToken>> SaveAuthTokenUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, AccessToken bean = null)
        {

            var localVarPath = "/access-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAuthTokenUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessToken)));
        }

        /// <summary>
        /// Update a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse UpdateAuthTokenUsingPUT1 (string id, string sensediaAuth = null, AccessToken bean = null)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = UpdateAuthTokenUsingPUT1WithHttpInfo(id, sensediaAuth, bean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public ApiResponse< AccessTokenResponse > UpdateAuthTokenUsingPUT1WithHttpInfo (string id, string sensediaAuth = null, AccessToken bean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensApi->UpdateAuthTokenUsingPUT1");

            var localVarPath = "/access-tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthTokenUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        /// Update a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> UpdateAuthTokenUsingPUT1Async (string id, string sensediaAuth = null, AccessToken bean = null)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = await UpdateAuthTokenUsingPUT1AsyncWithHttpInfo(id, sensediaAuth, bean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access token id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to update a access token. (optional)</param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> UpdateAuthTokenUsingPUT1AsyncWithHttpInfo (string id, string sensediaAuth = null, AccessToken bean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessTokensApi->UpdateAuthTokenUsingPUT1");

            var localVarPath = "/access-tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthTokenUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        /// Validate partial access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>Object</returns>
        public Object ValidatePartialAccessTokenUsingPOST1 (string sensediaAuth = null, AccessToken bean = null)
        {
             ApiResponse<Object> localVarResponse = ValidatePartialAccessTokenUsingPOST1WithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate partial access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ValidatePartialAccessTokenUsingPOST1WithHttpInfo (string sensediaAuth = null, AccessToken bean = null)
        {

            var localVarPath = "/access-tokens/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialAccessTokenUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Validate partial access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ValidatePartialAccessTokenUsingPOST1Async (string sensediaAuth = null, AccessToken bean = null)
        {
             ApiResponse<Object> localVarResponse = await ValidatePartialAccessTokenUsingPOST1AsyncWithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate partial access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">Access token json to validate a access token. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidatePartialAccessTokenUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, AccessToken bean = null)
        {

            var localVarPath = "/access-tokens/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialAccessTokenUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
