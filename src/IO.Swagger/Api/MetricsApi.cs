/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find Health
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>List&lt;OperationHealth&gt;</returns>
        List<OperationHealth> FindHealthUsingGET1 (string sensediaAuth = null, bool? healthPortal = null);

        /// <summary>
        /// Find Health
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>ApiResponse of List&lt;OperationHealth&gt;</returns>
        ApiResponse<List<OperationHealth>> FindHealthUsingGET1WithHttpInfo (string sensediaAuth = null, bool? healthPortal = null);
        /// <summary>
        /// Find top access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TopAccessToken&gt;</returns>
        List<TopAccessToken> FindTopAccessTokensUsingGET1 (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);

        /// <summary>
        /// Find top access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TopAccessToken&gt;</returns>
        ApiResponse<List<TopAccessToken>> FindTopAccessTokensUsingGET1WithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);
        /// <summary>
        /// Find top apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TopApp&gt;</returns>
        List<TopApp> FindTopAppsUsingGET1 (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);

        /// <summary>
        /// Find top apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TopApp&gt;</returns>
        ApiResponse<List<TopApp>> FindTopAppsUsingGET1WithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);
        /// <summary>
        /// Find access token consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TokensMetric&gt;</returns>
        List<TokensMetric> GetAccessTokensByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find access token consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TokensMetric&gt;</returns>
        ApiResponse<List<TokensMetric>> GetAccessTokensByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Find apps consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TokensMetric&gt;</returns>
        List<TokensMetric> GetAppsByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find apps consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TokensMetric&gt;</returns>
        ApiResponse<List<TokensMetric>> GetAppsByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Find cache latency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;OperationMetric&gt;</returns>
        List<OperationMetric> GetCacheLatencyUsingGET1 (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find cache latency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;OperationMetric&gt;</returns>
        ApiResponse<List<OperationMetric>> GetCacheLatencyUsingGET1WithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Retrive cache size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>CacheMetric</returns>
        CacheMetric GetCacheSizeUsingGET1 (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null);

        /// <summary>
        /// Retrive cache size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>ApiResponse of CacheMetric</returns>
        ApiResponse<CacheMetric> GetCacheSizeUsingGET1WithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null);
        /// <summary>
        /// Find cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;OperationMetric&gt;</returns>
        List<OperationMetric> GetCacheUsingGET1 (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;OperationMetric&gt;</returns>
        ApiResponse<List<OperationMetric>> GetCacheUsingGET1WithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Find calls by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>List&lt;CallsMetric&gt;</returns>
        List<CallsMetric> GetCallsByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null);

        /// <summary>
        /// Find calls by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>ApiResponse of List&lt;CallsMetric&gt;</returns>
        ApiResponse<List<CallsMetric>> GetCallsByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null);
        /// <summary>
        /// Find latency by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;LatencyMetric&gt;</returns>
        List<LatencyMetric> GetLatencyByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find latency by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;LatencyMetric&gt;</returns>
        ApiResponse<List<LatencyMetric>> GetLatencyByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Retrive Status Error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>int?</returns>
        int? GetStatusErrorUsingGET1 (string sensediaAuth = null);

        /// <summary>
        /// Retrive Status Error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> GetStatusErrorUsingGET1WithHttpInfo (string sensediaAuth = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find Health
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>Task of List&lt;OperationHealth&gt;</returns>
        System.Threading.Tasks.Task<List<OperationHealth>> FindHealthUsingGET1Async (string sensediaAuth = null, bool? healthPortal = null);

        /// <summary>
        /// Find Health
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OperationHealth&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OperationHealth>>> FindHealthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, bool? healthPortal = null);
        /// <summary>
        /// Find top access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TopAccessToken&gt;</returns>
        System.Threading.Tasks.Task<List<TopAccessToken>> FindTopAccessTokensUsingGET1Async (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);

        /// <summary>
        /// Find top access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TopAccessToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TopAccessToken>>> FindTopAccessTokensUsingGET1AsyncWithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);
        /// <summary>
        /// Find top apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TopApp&gt;</returns>
        System.Threading.Tasks.Task<List<TopApp>> FindTopAppsUsingGET1Async (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);

        /// <summary>
        /// Find top apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TopApp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TopApp>>> FindTopAppsUsingGET1AsyncWithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null);
        /// <summary>
        /// Find access token consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TokensMetric&gt;</returns>
        System.Threading.Tasks.Task<List<TokensMetric>> GetAccessTokensByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find access token consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TokensMetric&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TokensMetric>>> GetAccessTokensByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Find apps consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TokensMetric&gt;</returns>
        System.Threading.Tasks.Task<List<TokensMetric>> GetAppsByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find apps consolited by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TokensMetric&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TokensMetric>>> GetAppsByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Find cache latency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;OperationMetric&gt;</returns>
        System.Threading.Tasks.Task<List<OperationMetric>> GetCacheLatencyUsingGET1Async (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find cache latency
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OperationMetric&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OperationMetric>>> GetCacheLatencyUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Retrive cache size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>Task of CacheMetric</returns>
        System.Threading.Tasks.Task<CacheMetric> GetCacheSizeUsingGET1Async (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null);

        /// <summary>
        /// Retrive cache size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>Task of ApiResponse (CacheMetric)</returns>
        System.Threading.Tasks.Task<ApiResponse<CacheMetric>> GetCacheSizeUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null);
        /// <summary>
        /// Find cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;OperationMetric&gt;</returns>
        System.Threading.Tasks.Task<List<OperationMetric>> GetCacheUsingGET1Async (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OperationMetric&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OperationMetric>>> GetCacheUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Find calls by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>Task of List&lt;CallsMetric&gt;</returns>
        System.Threading.Tasks.Task<List<CallsMetric>> GetCallsByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null);

        /// <summary>
        /// Find calls by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CallsMetric&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CallsMetric>>> GetCallsByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null);
        /// <summary>
        /// Find latency by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;LatencyMetric&gt;</returns>
        System.Threading.Tasks.Task<List<LatencyMetric>> GetLatencyByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);

        /// <summary>
        /// Find latency by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LatencyMetric&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LatencyMetric>>> GetLatencyByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null);
        /// <summary>
        /// Retrive Status Error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> GetStatusErrorUsingGET1Async (string sensediaAuth = null);

        /// <summary>
        /// Retrive Status Error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> GetStatusErrorUsingGET1AsyncWithHttpInfo (string sensediaAuth = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetricsApi : IMetricsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetricsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find Health 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>List&lt;OperationHealth&gt;</returns>
        public List<OperationHealth> FindHealthUsingGET1 (string sensediaAuth = null, bool? healthPortal = null)
        {
             ApiResponse<List<OperationHealth>> localVarResponse = FindHealthUsingGET1WithHttpInfo(sensediaAuth, healthPortal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Health 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>ApiResponse of List&lt;OperationHealth&gt;</returns>
        public ApiResponse< List<OperationHealth> > FindHealthUsingGET1WithHttpInfo (string sensediaAuth = null, bool? healthPortal = null)
        {

            var localVarPath = "/metrics/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthPortal != null) localVarQueryParams.Add("healthPortal", Configuration.ApiClient.ParameterToString(healthPortal)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindHealthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationHealth>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OperationHealth>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationHealth>)));
        }

        /// <summary>
        /// Find Health 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>Task of List&lt;OperationHealth&gt;</returns>
        public async System.Threading.Tasks.Task<List<OperationHealth>> FindHealthUsingGET1Async (string sensediaAuth = null, bool? healthPortal = null)
        {
             ApiResponse<List<OperationHealth>> localVarResponse = await FindHealthUsingGET1AsyncWithHttpInfo(sensediaAuth, healthPortal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Health 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="healthPortal">Health Portal (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OperationHealth&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OperationHealth>>> FindHealthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, bool? healthPortal = null)
        {

            var localVarPath = "/metrics/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (healthPortal != null) localVarQueryParams.Add("healthPortal", Configuration.ApiClient.ParameterToString(healthPortal)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindHealthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationHealth>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OperationHealth>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationHealth>)));
        }

        /// <summary>
        /// Find top access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TopAccessToken&gt;</returns>
        public List<TopAccessToken> FindTopAccessTokensUsingGET1 (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
             ApiResponse<List<TopAccessToken>> localVarResponse = FindTopAccessTokensUsingGET1WithHttpInfo(howMany, sensediaAuth, beginDate, endDate, status, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find top access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TopAccessToken&gt;</returns>
        public ApiResponse< List<TopAccessToken> > FindTopAccessTokensUsingGET1WithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
            // verify the required parameter 'howMany' is set
            if (howMany == null)
                throw new ApiException(400, "Missing required parameter 'howMany' when calling MetricsApi->FindTopAccessTokensUsingGET1");

            var localVarPath = "/metrics/top-access-tokens/{howMany}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (howMany != null) localVarPathParams.Add("howMany", Configuration.ApiClient.ParameterToString(howMany)); // path parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTopAccessTokensUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TopAccessToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TopAccessToken>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TopAccessToken>)));
        }

        /// <summary>
        /// Find top access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TopAccessToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<TopAccessToken>> FindTopAccessTokensUsingGET1Async (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
             ApiResponse<List<TopAccessToken>> localVarResponse = await FindTopAccessTokensUsingGET1AsyncWithHttpInfo(howMany, sensediaAuth, beginDate, endDate, status, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find top access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TopAccessToken&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TopAccessToken>>> FindTopAccessTokensUsingGET1AsyncWithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
            // verify the required parameter 'howMany' is set
            if (howMany == null)
                throw new ApiException(400, "Missing required parameter 'howMany' when calling MetricsApi->FindTopAccessTokensUsingGET1");

            var localVarPath = "/metrics/top-access-tokens/{howMany}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (howMany != null) localVarPathParams.Add("howMany", Configuration.ApiClient.ParameterToString(howMany)); // path parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTopAccessTokensUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TopAccessToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TopAccessToken>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TopAccessToken>)));
        }

        /// <summary>
        /// Find top apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TopApp&gt;</returns>
        public List<TopApp> FindTopAppsUsingGET1 (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
             ApiResponse<List<TopApp>> localVarResponse = FindTopAppsUsingGET1WithHttpInfo(howMany, sensediaAuth, beginDate, endDate, status, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find top apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TopApp&gt;</returns>
        public ApiResponse< List<TopApp> > FindTopAppsUsingGET1WithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
            // verify the required parameter 'howMany' is set
            if (howMany == null)
                throw new ApiException(400, "Missing required parameter 'howMany' when calling MetricsApi->FindTopAppsUsingGET1");

            var localVarPath = "/metrics/top-apps/{howMany}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (howMany != null) localVarPathParams.Add("howMany", Configuration.ApiClient.ParameterToString(howMany)); // path parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTopAppsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TopApp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TopApp>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TopApp>)));
        }

        /// <summary>
        /// Find top apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TopApp&gt;</returns>
        public async System.Threading.Tasks.Task<List<TopApp>> FindTopAppsUsingGET1Async (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
             ApiResponse<List<TopApp>> localVarResponse = await FindTopAppsUsingGET1AsyncWithHttpInfo(howMany, sensediaAuth, beginDate, endDate, status, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find top apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="howMany">How many</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="status">Metric status (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TopApp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TopApp>>> FindTopAppsUsingGET1AsyncWithHttpInfo (int? howMany, string sensediaAuth = null, string beginDate = null, string endDate = null, string status = null, string resolution = null)
        {
            // verify the required parameter 'howMany' is set
            if (howMany == null)
                throw new ApiException(400, "Missing required parameter 'howMany' when calling MetricsApi->FindTopAppsUsingGET1");

            var localVarPath = "/metrics/top-apps/{howMany}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (howMany != null) localVarPathParams.Add("howMany", Configuration.ApiClient.ParameterToString(howMany)); // path parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTopAppsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TopApp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TopApp>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TopApp>)));
        }

        /// <summary>
        /// Find access token consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TokensMetric&gt;</returns>
        public List<TokensMetric> GetAccessTokensByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<TokensMetric>> localVarResponse = GetAccessTokensByMonthUsingGET1WithHttpInfo(sensediaAuth, beginDate, endDate, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find access token consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TokensMetric&gt;</returns>
        public ApiResponse< List<TokensMetric> > GetAccessTokensByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/access-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessTokensByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TokensMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TokensMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TokensMetric>)));
        }

        /// <summary>
        /// Find access token consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TokensMetric&gt;</returns>
        public async System.Threading.Tasks.Task<List<TokensMetric>> GetAccessTokensByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<TokensMetric>> localVarResponse = await GetAccessTokensByMonthUsingGET1AsyncWithHttpInfo(sensediaAuth, beginDate, endDate, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find access token consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TokensMetric&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TokensMetric>>> GetAccessTokensByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/access-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessTokensByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TokensMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TokensMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TokensMetric>)));
        }

        /// <summary>
        /// Find apps consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;TokensMetric&gt;</returns>
        public List<TokensMetric> GetAppsByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<TokensMetric>> localVarResponse = GetAppsByMonthUsingGET1WithHttpInfo(sensediaAuth, beginDate, endDate, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find apps consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;TokensMetric&gt;</returns>
        public ApiResponse< List<TokensMetric> > GetAppsByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppsByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TokensMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TokensMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TokensMetric>)));
        }

        /// <summary>
        /// Find apps consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;TokensMetric&gt;</returns>
        public async System.Threading.Tasks.Task<List<TokensMetric>> GetAppsByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<TokensMetric>> localVarResponse = await GetAppsByMonthUsingGET1AsyncWithHttpInfo(sensediaAuth, beginDate, endDate, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find apps consolited by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TokensMetric&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TokensMetric>>> GetAppsByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppsByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TokensMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TokensMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TokensMetric>)));
        }

        /// <summary>
        /// Find cache latency 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;OperationMetric&gt;</returns>
        public List<OperationMetric> GetCacheLatencyUsingGET1 (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<OperationMetric>> localVarResponse = GetCacheLatencyUsingGET1WithHttpInfo(sensediaAuth, apiId, revisionId, operationId, environmentId, beginDate, endDate, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find cache latency 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;OperationMetric&gt;</returns>
        public ApiResponse< List<OperationMetric> > GetCacheLatencyUsingGET1WithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/cache/latency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCacheLatencyUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OperationMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationMetric>)));
        }

        /// <summary>
        /// Find cache latency 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;OperationMetric&gt;</returns>
        public async System.Threading.Tasks.Task<List<OperationMetric>> GetCacheLatencyUsingGET1Async (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<OperationMetric>> localVarResponse = await GetCacheLatencyUsingGET1AsyncWithHttpInfo(sensediaAuth, apiId, revisionId, operationId, environmentId, beginDate, endDate, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find cache latency 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OperationMetric&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OperationMetric>>> GetCacheLatencyUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/cache/latency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCacheLatencyUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OperationMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationMetric>)));
        }

        /// <summary>
        /// Retrive cache size 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>CacheMetric</returns>
        public CacheMetric GetCacheSizeUsingGET1 (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null)
        {
             ApiResponse<CacheMetric> localVarResponse = GetCacheSizeUsingGET1WithHttpInfo(sensediaAuth, apiId, revisionId, operationId, environmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive cache size 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>ApiResponse of CacheMetric</returns>
        public ApiResponse< CacheMetric > GetCacheSizeUsingGET1WithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null)
        {

            var localVarPath = "/metrics/cache/size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCacheSizeUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CacheMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CacheMetric) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CacheMetric)));
        }

        /// <summary>
        /// Retrive cache size 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>Task of CacheMetric</returns>
        public async System.Threading.Tasks.Task<CacheMetric> GetCacheSizeUsingGET1Async (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null)
        {
             ApiResponse<CacheMetric> localVarResponse = await GetCacheSizeUsingGET1AsyncWithHttpInfo(sensediaAuth, apiId, revisionId, operationId, environmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive cache size 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <returns>Task of ApiResponse (CacheMetric)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CacheMetric>> GetCacheSizeUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null)
        {

            var localVarPath = "/metrics/cache/size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCacheSizeUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CacheMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CacheMetric) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CacheMetric)));
        }

        /// <summary>
        /// Find cache 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;OperationMetric&gt;</returns>
        public List<OperationMetric> GetCacheUsingGET1 (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<OperationMetric>> localVarResponse = GetCacheUsingGET1WithHttpInfo(sensediaAuth, apiId, revisionId, operationId, environmentId, beginDate, endDate, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find cache 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;OperationMetric&gt;</returns>
        public ApiResponse< List<OperationMetric> > GetCacheUsingGET1WithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCacheUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OperationMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationMetric>)));
        }

        /// <summary>
        /// Find cache 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;OperationMetric&gt;</returns>
        public async System.Threading.Tasks.Task<List<OperationMetric>> GetCacheUsingGET1Async (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<OperationMetric>> localVarResponse = await GetCacheUsingGET1AsyncWithHttpInfo(sensediaAuth, apiId, revisionId, operationId, environmentId, beginDate, endDate, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find cache 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OperationMetric&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OperationMetric>>> GetCacheUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, long? apiId = null, long? revisionId = null, long? operationId = null, long? environmentId = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCacheUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OperationMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OperationMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OperationMetric>)));
        }

        /// <summary>
        /// Find calls by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>List&lt;CallsMetric&gt;</returns>
        public List<CallsMetric> GetCallsByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null)
        {
             ApiResponse<List<CallsMetric>> localVarResponse = GetCallsByMonthUsingGET1WithHttpInfo(sensediaAuth, beginDate, endDate, resolution, environmentId, apiId, revisionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find calls by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>ApiResponse of List&lt;CallsMetric&gt;</returns>
        public ApiResponse< List<CallsMetric> > GetCallsByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null)
        {

            var localVarPath = "/metrics/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CallsMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CallsMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CallsMetric>)));
        }

        /// <summary>
        /// Find calls by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>Task of List&lt;CallsMetric&gt;</returns>
        public async System.Threading.Tasks.Task<List<CallsMetric>> GetCallsByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null)
        {
             ApiResponse<List<CallsMetric>> localVarResponse = await GetCallsByMonthUsingGET1AsyncWithHttpInfo(sensediaAuth, beginDate, endDate, resolution, environmentId, apiId, revisionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find calls by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CallsMetric&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CallsMetric>>> GetCallsByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null, long? environmentId = null, long? apiId = null, long? revisionId = null)
        {

            var localVarPath = "/metrics/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CallsMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CallsMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CallsMetric>)));
        }

        /// <summary>
        /// Find latency by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>List&lt;LatencyMetric&gt;</returns>
        public List<LatencyMetric> GetLatencyByMonthUsingGET1 (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<LatencyMetric>> localVarResponse = GetLatencyByMonthUsingGET1WithHttpInfo(sensediaAuth, beginDate, endDate, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find latency by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>ApiResponse of List&lt;LatencyMetric&gt;</returns>
        public ApiResponse< List<LatencyMetric> > GetLatencyByMonthUsingGET1WithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/latency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatencyByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatencyMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatencyMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatencyMetric>)));
        }

        /// <summary>
        /// Find latency by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of List&lt;LatencyMetric&gt;</returns>
        public async System.Threading.Tasks.Task<List<LatencyMetric>> GetLatencyByMonthUsingGET1Async (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {
             ApiResponse<List<LatencyMetric>> localVarResponse = await GetLatencyByMonthUsingGET1AsyncWithHttpInfo(sensediaAuth, beginDate, endDate, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find latency by month 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="resolution">Metric resolution (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LatencyMetric&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LatencyMetric>>> GetLatencyByMonthUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string beginDate = null, string endDate = null, string resolution = null)
        {

            var localVarPath = "/metrics/latency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatencyByMonthUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatencyMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatencyMetric>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatencyMetric>)));
        }

        /// <summary>
        /// Retrive Status Error 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>int?</returns>
        public int? GetStatusErrorUsingGET1 (string sensediaAuth = null)
        {
             ApiResponse<int?> localVarResponse = GetStatusErrorUsingGET1WithHttpInfo(sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive Status Error 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > GetStatusErrorUsingGET1WithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/metrics/statusError";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusErrorUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Retrive Status Error 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> GetStatusErrorUsingGET1Async (string sensediaAuth = null)
        {
             ApiResponse<int?> localVarResponse = await GetStatusErrorUsingGET1AsyncWithHttpInfo(sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive Status Error 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> GetStatusErrorUsingGET1AsyncWithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/metrics/statusError";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusErrorUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

    }
}
