/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clone a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse CloneApiUsingPOST1 (string id, string sensediaAuth = null, API apiBean = null);

        /// <summary>
        /// Clone a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> CloneApiUsingPOST1WithHttpInfo (string id, string sensediaAuth = null, API apiBean = null);
        /// <summary>
        /// Create a new API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse CreateAPIUsingPOST1 (string sensediaAuth = null, APICreateBean bean = null);

        /// <summary>
        /// Create a new API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> CreateAPIUsingPOST1WithHttpInfo (string sensediaAuth = null, APICreateBean bean = null);
        /// <summary>
        /// Delete a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteAPIUsingDELETE1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Delete a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteAPIUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Find last revision by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>RevisionBean</returns>
        RevisionBean FindLastRevisionUsingGET1 (long? id, string sensediaAuth = null);

        /// <summary>
        /// Find last revision by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of RevisionBean</returns>
        ApiResponse<RevisionBean> FindLastRevisionUsingGET1WithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Find version by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;API&gt;</returns>
        List<API> FindVersionsByAPIUsingGET1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Find version by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;API&gt;</returns>
        ApiResponse<List<API>> FindVersionsByAPIUsingGET1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Find API by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>API</returns>
        API GetAPIByIdUsingGET1 (string apiId, string sensediaAuth = null, string filter = null);

        /// <summary>
        /// Find API by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>ApiResponse of API</returns>
        ApiResponse<API> GetAPIByIdUsingGET1WithHttpInfo (string apiId, string sensediaAuth = null, string filter = null);
        /// <summary>
        /// Retrive changelog per API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLog&gt;</returns>
        List<ChangeLog> GetAPIChangeLogUsingGET1 (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLog&gt;</returns>
        ApiResponse<List<ChangeLog>> GetAPIChangeLogUsingGET1WithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Return all APIs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>List&lt;API&gt;</returns>
        List<API> GetAPIsUsingGET1 (string sensediaAuth = null, bool? privateAPI = null, string filter = null);

        /// <summary>
        /// Return all APIs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>ApiResponse of List&lt;API&gt;</returns>
        ApiResponse<List<API>> GetAPIsUsingGET1WithHttpInfo (string sensediaAuth = null, bool? privateAPI = null, string filter = null);
        /// <summary>
        /// Create new version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse NewVersionAPIUsingPOST1 (string id, string sensediaAuth = null, API apiBean = null);

        /// <summary>
        /// Create new version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> NewVersionAPIUsingPOST1WithHttpInfo (string id, string sensediaAuth = null, API apiBean = null);
        /// <summary>
        /// Delete environment link with API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity RemoveEnvironmentUsingDELETE1 (string id, string environmentId, string sensediaAuth = null);

        /// <summary>
        /// Delete environment link with API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> RemoveEnvironmentUsingDELETE1WithHttpInfo (string id, string environmentId, string sensediaAuth = null);
        /// <summary>
        /// Update a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>APIResponse</returns>
        APIResponse UpdateAPIUsingPUT1 (string id, string sensediaAuth = null, API apiBean = null);

        /// <summary>
        /// Update a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        ApiResponse<APIResponse> UpdateAPIUsingPUT1WithHttpInfo (string id, string sensediaAuth = null, API apiBean = null);
        /// <summary>
        /// Validate partial a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ValidatePartialAPIUsingPOST1 (string sensediaAuth = null, API bean = null);

        /// <summary>
        /// Validate partial a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ValidatePartialAPIUsingPOST1WithHttpInfo (string sensediaAuth = null, API bean = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clone a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> CloneApiUsingPOST1Async (string id, string sensediaAuth = null, API apiBean = null);

        /// <summary>
        /// Clone a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> CloneApiUsingPOST1AsyncWithHttpInfo (string id, string sensediaAuth = null, API apiBean = null);
        /// <summary>
        /// Create a new API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> CreateAPIUsingPOST1Async (string sensediaAuth = null, APICreateBean bean = null);

        /// <summary>
        /// Create a new API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> CreateAPIUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, APICreateBean bean = null);
        /// <summary>
        /// Delete a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteAPIUsingDELETE1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Delete a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteAPIUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Find last revision by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of RevisionBean</returns>
        System.Threading.Tasks.Task<RevisionBean> FindLastRevisionUsingGET1Async (long? id, string sensediaAuth = null);

        /// <summary>
        /// Find last revision by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (RevisionBean)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevisionBean>> FindLastRevisionUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Find version by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;API&gt;</returns>
        System.Threading.Tasks.Task<List<API>> FindVersionsByAPIUsingGET1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Find version by API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;API&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<API>>> FindVersionsByAPIUsingGET1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Find API by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of API</returns>
        System.Threading.Tasks.Task<API> GetAPIByIdUsingGET1Async (string apiId, string sensediaAuth = null, string filter = null);

        /// <summary>
        /// Find API by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of ApiResponse (API)</returns>
        System.Threading.Tasks.Task<ApiResponse<API>> GetAPIByIdUsingGET1AsyncWithHttpInfo (string apiId, string sensediaAuth = null, string filter = null);
        /// <summary>
        /// Retrive changelog per API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLog&gt;</returns>
        System.Threading.Tasks.Task<List<ChangeLog>> GetAPIChangeLogUsingGET1Async (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per API id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChangeLog>>> GetAPIChangeLogUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Return all APIs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of List&lt;API&gt;</returns>
        System.Threading.Tasks.Task<List<API>> GetAPIsUsingGET1Async (string sensediaAuth = null, bool? privateAPI = null, string filter = null);

        /// <summary>
        /// Return all APIs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;API&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<API>>> GetAPIsUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, bool? privateAPI = null, string filter = null);
        /// <summary>
        /// Create new version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> NewVersionAPIUsingPOST1Async (string id, string sensediaAuth = null, API apiBean = null);

        /// <summary>
        /// Create new version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> NewVersionAPIUsingPOST1AsyncWithHttpInfo (string id, string sensediaAuth = null, API apiBean = null);
        /// <summary>
        /// Delete environment link with API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> RemoveEnvironmentUsingDELETE1Async (string id, string environmentId, string sensediaAuth = null);

        /// <summary>
        /// Delete environment link with API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> RemoveEnvironmentUsingDELETE1AsyncWithHttpInfo (string id, string environmentId, string sensediaAuth = null);
        /// <summary>
        /// Update a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of APIResponse</returns>
        System.Threading.Tasks.Task<APIResponse> UpdateAPIUsingPUT1Async (string id, string sensediaAuth = null, API apiBean = null);

        /// <summary>
        /// Update a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIResponse>> UpdateAPIUsingPUT1AsyncWithHttpInfo (string id, string sensediaAuth = null, API apiBean = null);
        /// <summary>
        /// Validate partial a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ValidatePartialAPIUsingPOST1Async (string sensediaAuth = null, API bean = null);

        /// <summary>
        /// Validate partial a API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ValidatePartialAPIUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, API bean = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class APIsApi : IAPIsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public APIsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clone a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse CloneApiUsingPOST1 (string id, string sensediaAuth = null, API apiBean = null)
        {
             ApiResponse<APIResponse> localVarResponse = CloneApiUsingPOST1WithHttpInfo(id, sensediaAuth, apiBean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse< APIResponse > CloneApiUsingPOST1WithHttpInfo (string id, string sensediaAuth = null, API apiBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->CloneApiUsingPOST1");

            var localVarPath = "/apis/{id}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (apiBean != null && apiBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(apiBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneApiUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Clone a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> CloneApiUsingPOST1Async (string id, string sensediaAuth = null, API apiBean = null)
        {
             ApiResponse<APIResponse> localVarResponse = await CloneApiUsingPOST1AsyncWithHttpInfo(id, sensediaAuth, apiBean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> CloneApiUsingPOST1AsyncWithHttpInfo (string id, string sensediaAuth = null, API apiBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->CloneApiUsingPOST1");

            var localVarPath = "/apis/{id}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (apiBean != null && apiBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(apiBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneApiUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Create a new API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse CreateAPIUsingPOST1 (string sensediaAuth = null, APICreateBean bean = null)
        {
             ApiResponse<APIResponse> localVarResponse = CreateAPIUsingPOST1WithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse< APIResponse > CreateAPIUsingPOST1WithHttpInfo (string sensediaAuth = null, APICreateBean bean = null)
        {

            var localVarPath = "/apis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAPIUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Create a new API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> CreateAPIUsingPOST1Async (string sensediaAuth = null, APICreateBean bean = null)
        {
             ApiResponse<APIResponse> localVarResponse = await CreateAPIUsingPOST1AsyncWithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to create a API (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> CreateAPIUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, APICreateBean bean = null)
        {

            var localVarPath = "/apis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAPIUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Delete a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteAPIUsingDELETE1 (string id, string sensediaAuth = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteAPIUsingDELETE1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteAPIUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->DeleteAPIUsingDELETE1");

            var localVarPath = "/apis/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAPIUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteAPIUsingDELETE1Async (string id, string sensediaAuth = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteAPIUsingDELETE1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteAPIUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->DeleteAPIUsingDELETE1");

            var localVarPath = "/apis/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAPIUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Find last revision by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>RevisionBean</returns>
        public RevisionBean FindLastRevisionUsingGET1 (long? id, string sensediaAuth = null)
        {
             ApiResponse<RevisionBean> localVarResponse = FindLastRevisionUsingGET1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find last revision by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of RevisionBean</returns>
        public ApiResponse< RevisionBean > FindLastRevisionUsingGET1WithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->FindLastRevisionUsingGET1");

            var localVarPath = "/apis/{id}/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindLastRevisionUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevisionBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevisionBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevisionBean)));
        }

        /// <summary>
        /// Find last revision by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of RevisionBean</returns>
        public async System.Threading.Tasks.Task<RevisionBean> FindLastRevisionUsingGET1Async (long? id, string sensediaAuth = null)
        {
             ApiResponse<RevisionBean> localVarResponse = await FindLastRevisionUsingGET1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find last revision by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (RevisionBean)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevisionBean>> FindLastRevisionUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->FindLastRevisionUsingGET1");

            var localVarPath = "/apis/{id}/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindLastRevisionUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevisionBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevisionBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevisionBean)));
        }

        /// <summary>
        /// Find version by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;API&gt;</returns>
        public List<API> FindVersionsByAPIUsingGET1 (string id, string sensediaAuth = null)
        {
             ApiResponse<List<API>> localVarResponse = FindVersionsByAPIUsingGET1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find version by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;API&gt;</returns>
        public ApiResponse< List<API> > FindVersionsByAPIUsingGET1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->FindVersionsByAPIUsingGET1");

            var localVarPath = "/apis/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindVersionsByAPIUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<API>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<API>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<API>)));
        }

        /// <summary>
        /// Find version by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;API&gt;</returns>
        public async System.Threading.Tasks.Task<List<API>> FindVersionsByAPIUsingGET1Async (string id, string sensediaAuth = null)
        {
             ApiResponse<List<API>> localVarResponse = await FindVersionsByAPIUsingGET1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find version by API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;API&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<API>>> FindVersionsByAPIUsingGET1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->FindVersionsByAPIUsingGET1");

            var localVarPath = "/apis/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindVersionsByAPIUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<API>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<API>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<API>)));
        }

        /// <summary>
        /// Find API by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>API</returns>
        public API GetAPIByIdUsingGET1 (string apiId, string sensediaAuth = null, string filter = null)
        {
             ApiResponse<API> localVarResponse = GetAPIByIdUsingGET1WithHttpInfo(apiId, sensediaAuth, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find API by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>ApiResponse of API</returns>
        public ApiResponse< API > GetAPIByIdUsingGET1WithHttpInfo (string apiId, string sensediaAuth = null, string filter = null)
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->GetAPIByIdUsingGET1");

            var localVarPath = "/apis/{apiId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarPathParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<API>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (API) Configuration.ApiClient.Deserialize(localVarResponse, typeof(API)));
        }

        /// <summary>
        /// Find API by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of API</returns>
        public async System.Threading.Tasks.Task<API> GetAPIByIdUsingGET1Async (string apiId, string sensediaAuth = null, string filter = null)
        {
             ApiResponse<API> localVarResponse = await GetAPIByIdUsingGET1AsyncWithHttpInfo(apiId, sensediaAuth, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find API by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of ApiResponse (API)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<API>> GetAPIByIdUsingGET1AsyncWithHttpInfo (string apiId, string sensediaAuth = null, string filter = null)
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->GetAPIByIdUsingGET1");

            var localVarPath = "/apis/{apiId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiId != null) localVarPathParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<API>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (API) Configuration.ApiClient.Deserialize(localVarResponse, typeof(API)));
        }

        /// <summary>
        /// Retrive changelog per API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLog&gt;</returns>
        public List<ChangeLog> GetAPIChangeLogUsingGET1 (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLog>> localVarResponse = GetAPIChangeLogUsingGET1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive changelog per API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLog&gt;</returns>
        public ApiResponse< List<ChangeLog> > GetAPIChangeLogUsingGET1WithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->GetAPIChangeLogUsingGET1");

            var localVarPath = "/apis/{id}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLog>)));
        }

        /// <summary>
        /// Retrive changelog per API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChangeLog>> GetAPIChangeLogUsingGET1Async (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLog>> localVarResponse = await GetAPIChangeLogUsingGET1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive changelog per API id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChangeLog>>> GetAPIChangeLogUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->GetAPIChangeLogUsingGET1");

            var localVarPath = "/apis/{id}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLog>)));
        }

        /// <summary>
        /// Return all APIs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>List&lt;API&gt;</returns>
        public List<API> GetAPIsUsingGET1 (string sensediaAuth = null, bool? privateAPI = null, string filter = null)
        {
             ApiResponse<List<API>> localVarResponse = GetAPIsUsingGET1WithHttpInfo(sensediaAuth, privateAPI, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all APIs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>ApiResponse of List&lt;API&gt;</returns>
        public ApiResponse< List<API> > GetAPIsUsingGET1WithHttpInfo (string sensediaAuth = null, bool? privateAPI = null, string filter = null)
        {

            var localVarPath = "/apis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (privateAPI != null) localVarQueryParams.Add("privateAPI", Configuration.ApiClient.ParameterToString(privateAPI)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<API>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<API>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<API>)));
        }

        /// <summary>
        /// Return all APIs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of List&lt;API&gt;</returns>
        public async System.Threading.Tasks.Task<List<API>> GetAPIsUsingGET1Async (string sensediaAuth = null, bool? privateAPI = null, string filter = null)
        {
             ApiResponse<List<API>> localVarResponse = await GetAPIsUsingGET1AsyncWithHttpInfo(sensediaAuth, privateAPI, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all APIs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="privateAPI">Private API (optional)</param>
        /// <param name="filter">Filter type searched (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;API&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<API>>> GetAPIsUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, bool? privateAPI = null, string filter = null)
        {

            var localVarPath = "/apis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (privateAPI != null) localVarQueryParams.Add("privateAPI", Configuration.ApiClient.ParameterToString(privateAPI)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<API>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<API>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<API>)));
        }

        /// <summary>
        /// Create new version 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse NewVersionAPIUsingPOST1 (string id, string sensediaAuth = null, API apiBean = null)
        {
             ApiResponse<APIResponse> localVarResponse = NewVersionAPIUsingPOST1WithHttpInfo(id, sensediaAuth, apiBean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new version 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse< APIResponse > NewVersionAPIUsingPOST1WithHttpInfo (string id, string sensediaAuth = null, API apiBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->NewVersionAPIUsingPOST1");

            var localVarPath = "/apis/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (apiBean != null && apiBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(apiBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewVersionAPIUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Create new version 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> NewVersionAPIUsingPOST1Async (string id, string sensediaAuth = null, API apiBean = null)
        {
             ApiResponse<APIResponse> localVarResponse = await NewVersionAPIUsingPOST1AsyncWithHttpInfo(id, sensediaAuth, apiBean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new version 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> NewVersionAPIUsingPOST1AsyncWithHttpInfo (string id, string sensediaAuth = null, API apiBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->NewVersionAPIUsingPOST1");

            var localVarPath = "/apis/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (apiBean != null && apiBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(apiBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NewVersionAPIUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Delete environment link with API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity RemoveEnvironmentUsingDELETE1 (string id, string environmentId, string sensediaAuth = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = RemoveEnvironmentUsingDELETE1WithHttpInfo(id, environmentId, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete environment link with API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > RemoveEnvironmentUsingDELETE1WithHttpInfo (string id, string environmentId, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->RemoveEnvironmentUsingDELETE1");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling APIsApi->RemoveEnvironmentUsingDELETE1");

            var localVarPath = "/apis/{id}/environments/{environmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveEnvironmentUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete environment link with API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> RemoveEnvironmentUsingDELETE1Async (string id, string environmentId, string sensediaAuth = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await RemoveEnvironmentUsingDELETE1AsyncWithHttpInfo(id, environmentId, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete environment link with API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> RemoveEnvironmentUsingDELETE1AsyncWithHttpInfo (string id, string environmentId, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->RemoveEnvironmentUsingDELETE1");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling APIsApi->RemoveEnvironmentUsingDELETE1");

            var localVarPath = "/apis/{id}/environments/{environmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveEnvironmentUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Update a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>APIResponse</returns>
        public APIResponse UpdateAPIUsingPUT1 (string id, string sensediaAuth = null, API apiBean = null)
        {
             ApiResponse<APIResponse> localVarResponse = UpdateAPIUsingPUT1WithHttpInfo(id, sensediaAuth, apiBean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>ApiResponse of APIResponse</returns>
        public ApiResponse< APIResponse > UpdateAPIUsingPUT1WithHttpInfo (string id, string sensediaAuth = null, API apiBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->UpdateAPIUsingPUT1");

            var localVarPath = "/apis/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (apiBean != null && apiBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(apiBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAPIUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Update a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of APIResponse</returns>
        public async System.Threading.Tasks.Task<APIResponse> UpdateAPIUsingPUT1Async (string id, string sensediaAuth = null, API apiBean = null)
        {
             ApiResponse<APIResponse> localVarResponse = await UpdateAPIUsingPUT1AsyncWithHttpInfo(id, sensediaAuth, apiBean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">API id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiBean">API json to update a api (optional)</param>
        /// <returns>Task of ApiResponse (APIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIResponse>> UpdateAPIUsingPUT1AsyncWithHttpInfo (string id, string sensediaAuth = null, API apiBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling APIsApi->UpdateAPIUsingPUT1");

            var localVarPath = "/apis/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (apiBean != null && apiBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(apiBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apiBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAPIUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIResponse)));
        }

        /// <summary>
        /// Validate partial a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ValidatePartialAPIUsingPOST1 (string sensediaAuth = null, API bean = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ValidatePartialAPIUsingPOST1WithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate partial a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ValidatePartialAPIUsingPOST1WithHttpInfo (string sensediaAuth = null, API bean = null)
        {

            var localVarPath = "/apis/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialAPIUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Validate partial a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ValidatePartialAPIUsingPOST1Async (string sensediaAuth = null, API bean = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ValidatePartialAPIUsingPOST1AsyncWithHttpInfo(sensediaAuth, bean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate partial a API 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="bean">API json to validate a API (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ValidatePartialAPIUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, API bean = null)
        {

            var localVarPath = "/apis/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialAPIUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

    }
}
