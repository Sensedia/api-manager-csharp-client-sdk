/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrive call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Call</returns>
        Call RetrieveCallByIdUsingGET1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Retrive call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Call</returns>
        ApiResponse<Call> RetrieveCallByIdUsingGET1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrive calls with filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>CallResponse</returns>
        CallResponse RetrieveCallsWithFiltersUsingGET1 (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null);

        /// <summary>
        /// Retrive calls with filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>ApiResponse of CallResponse</returns>
        ApiResponse<CallResponse> RetrieveCallsWithFiltersUsingGET1WithHttpInfo (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null);
        /// <summary>
        /// Retrive calls total by date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>long?</returns>
        long? RetrieveTotalCallsByDateUsingGET1 (string date, string sensediaAuth = null, long? apiId = null);

        /// <summary>
        /// Retrive calls total by date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> RetrieveTotalCallsByDateUsingGET1WithHttpInfo (string date, string sensediaAuth = null, long? apiId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrive call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of Call</returns>
        System.Threading.Tasks.Task<Call> RetrieveCallByIdUsingGET1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Retrive call by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        System.Threading.Tasks.Task<ApiResponse<Call>> RetrieveCallByIdUsingGET1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrive calls with filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>Task of CallResponse</returns>
        System.Threading.Tasks.Task<CallResponse> RetrieveCallsWithFiltersUsingGET1Async (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null);

        /// <summary>
        /// Retrive calls with filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>Task of ApiResponse (CallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallResponse>> RetrieveCallsWithFiltersUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null);
        /// <summary>
        /// Retrive calls total by date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> RetrieveTotalCallsByDateUsingGET1Async (string date, string sensediaAuth = null, long? apiId = null);

        /// <summary>
        /// Retrive calls total by date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> RetrieveTotalCallsByDateUsingGET1AsyncWithHttpInfo (string date, string sensediaAuth = null, long? apiId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallsApi : ICallsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrive call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Call</returns>
        public Call RetrieveCallByIdUsingGET1 (string id, string sensediaAuth = null)
        {
             ApiResponse<Call> localVarResponse = RetrieveCallByIdUsingGET1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Call</returns>
        public ApiResponse< Call > RetrieveCallByIdUsingGET1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CallsApi->RetrieveCallByIdUsingGET1");

            var localVarPath = "/calls/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCallByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Call>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Call) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Call)));
        }

        /// <summary>
        /// Retrive call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of Call</returns>
        public async System.Threading.Tasks.Task<Call> RetrieveCallByIdUsingGET1Async (string id, string sensediaAuth = null)
        {
             ApiResponse<Call> localVarResponse = await RetrieveCallByIdUsingGET1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive call by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Call id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Call>> RetrieveCallByIdUsingGET1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CallsApi->RetrieveCallByIdUsingGET1");

            var localVarPath = "/calls/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCallByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Call>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Call) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Call)));
        }

        /// <summary>
        /// Retrive calls with filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>CallResponse</returns>
        public CallResponse RetrieveCallsWithFiltersUsingGET1 (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null)
        {
             ApiResponse<CallResponse> localVarResponse = RetrieveCallsWithFiltersUsingGET1WithHttpInfo(sensediaAuth, actualPage, baseUris, appTokenCode, pageSize, appTokenName, authTokenOwner, apiId, operationId, resourceId, environmentId, revisionId, uri, customSearch, method, httpStatusFrom, httpStatusTo, beginDate, endDate, appDeveloper, forceDownload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive calls with filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>ApiResponse of CallResponse</returns>
        public ApiResponse< CallResponse > RetrieveCallsWithFiltersUsingGET1WithHttpInfo (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null)
        {

            var localVarPath = "/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (baseUris != null) localVarQueryParams.Add("baseUris", Configuration.ApiClient.ParameterToString(baseUris)); // query parameter
            if (appTokenCode != null) localVarQueryParams.Add("appTokenCode", Configuration.ApiClient.ParameterToString(appTokenCode)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (appTokenName != null) localVarQueryParams.Add("appTokenName", Configuration.ApiClient.ParameterToString(appTokenName)); // query parameter
            if (authTokenOwner != null) localVarQueryParams.Add("authTokenOwner", Configuration.ApiClient.ParameterToString(authTokenOwner)); // query parameter
            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (resourceId != null) localVarQueryParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (uri != null) localVarQueryParams.Add("uri", Configuration.ApiClient.ParameterToString(uri)); // query parameter
            if (customSearch != null) localVarQueryParams.Add("customSearch", Configuration.ApiClient.ParameterToString(customSearch)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (httpStatusFrom != null) localVarQueryParams.Add("httpStatusFrom", Configuration.ApiClient.ParameterToString(httpStatusFrom)); // query parameter
            if (httpStatusTo != null) localVarQueryParams.Add("httpStatusTo", Configuration.ApiClient.ParameterToString(httpStatusTo)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (appDeveloper != null) localVarQueryParams.Add("appDeveloper", Configuration.ApiClient.ParameterToString(appDeveloper)); // query parameter
            if (forceDownload != null) localVarQueryParams.Add("forceDownload", Configuration.ApiClient.ParameterToString(forceDownload)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCallsWithFiltersUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CallResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallResponse)));
        }

        /// <summary>
        /// Retrive calls with filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>Task of CallResponse</returns>
        public async System.Threading.Tasks.Task<CallResponse> RetrieveCallsWithFiltersUsingGET1Async (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null)
        {
             ApiResponse<CallResponse> localVarResponse = await RetrieveCallsWithFiltersUsingGET1AsyncWithHttpInfo(sensediaAuth, actualPage, baseUris, appTokenCode, pageSize, appTokenName, authTokenOwner, apiId, operationId, resourceId, environmentId, revisionId, uri, customSearch, method, httpStatusFrom, httpStatusTo, beginDate, endDate, appDeveloper, forceDownload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive calls with filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="baseUris">Base uris (optional)</param>
        /// <param name="appTokenCode">Code app token (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <param name="appTokenName">Name app token (optional)</param>
        /// <param name="authTokenOwner">Owner auth token (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <param name="operationId">Operation id (optional)</param>
        /// <param name="resourceId">Resource id (optional)</param>
        /// <param name="environmentId">Environment id (optional)</param>
        /// <param name="revisionId">Revision id (optional)</param>
        /// <param name="uri">URI (optional)</param>
        /// <param name="customSearch">Custom search (optional)</param>
        /// <param name="method">HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)</param>
        /// <param name="httpStatusFrom">HTTP status from (optional)</param>
        /// <param name="httpStatusTo">HTTP status to (optional)</param>
        /// <param name="beginDate">Begin date (optional)</param>
        /// <param name="endDate">End date (optional)</param>
        /// <param name="appDeveloper">APP Developer (optional)</param>
        /// <param name="forceDownload">Force archive download (optional)</param>
        /// <returns>Task of ApiResponse (CallResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallResponse>> RetrieveCallsWithFiltersUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, int? actualPage = null, string baseUris = null, string appTokenCode = null, int? pageSize = null, string appTokenName = null, string authTokenOwner = null, long? apiId = null, long? operationId = null, long? resourceId = null, long? environmentId = null, long? revisionId = null, string uri = null, string customSearch = null, string method = null, int? httpStatusFrom = null, int? httpStatusTo = null, string beginDate = null, string endDate = null, string appDeveloper = null, string forceDownload = null)
        {

            var localVarPath = "/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (baseUris != null) localVarQueryParams.Add("baseUris", Configuration.ApiClient.ParameterToString(baseUris)); // query parameter
            if (appTokenCode != null) localVarQueryParams.Add("appTokenCode", Configuration.ApiClient.ParameterToString(appTokenCode)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (appTokenName != null) localVarQueryParams.Add("appTokenName", Configuration.ApiClient.ParameterToString(appTokenName)); // query parameter
            if (authTokenOwner != null) localVarQueryParams.Add("authTokenOwner", Configuration.ApiClient.ParameterToString(authTokenOwner)); // query parameter
            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (operationId != null) localVarQueryParams.Add("operationId", Configuration.ApiClient.ParameterToString(operationId)); // query parameter
            if (resourceId != null) localVarQueryParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // query parameter
            if (environmentId != null) localVarQueryParams.Add("environmentId", Configuration.ApiClient.ParameterToString(environmentId)); // query parameter
            if (revisionId != null) localVarQueryParams.Add("revisionId", Configuration.ApiClient.ParameterToString(revisionId)); // query parameter
            if (uri != null) localVarQueryParams.Add("uri", Configuration.ApiClient.ParameterToString(uri)); // query parameter
            if (customSearch != null) localVarQueryParams.Add("customSearch", Configuration.ApiClient.ParameterToString(customSearch)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (httpStatusFrom != null) localVarQueryParams.Add("httpStatusFrom", Configuration.ApiClient.ParameterToString(httpStatusFrom)); // query parameter
            if (httpStatusTo != null) localVarQueryParams.Add("httpStatusTo", Configuration.ApiClient.ParameterToString(httpStatusTo)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (appDeveloper != null) localVarQueryParams.Add("appDeveloper", Configuration.ApiClient.ParameterToString(appDeveloper)); // query parameter
            if (forceDownload != null) localVarQueryParams.Add("forceDownload", Configuration.ApiClient.ParameterToString(forceDownload)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCallsWithFiltersUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CallResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallResponse)));
        }

        /// <summary>
        /// Retrive calls total by date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>long?</returns>
        public long? RetrieveTotalCallsByDateUsingGET1 (string date, string sensediaAuth = null, long? apiId = null)
        {
             ApiResponse<long?> localVarResponse = RetrieveTotalCallsByDateUsingGET1WithHttpInfo(date, sensediaAuth, apiId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive calls total by date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > RetrieveTotalCallsByDateUsingGET1WithHttpInfo (string date, string sensediaAuth = null, long? apiId = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CallsApi->RetrieveTotalCallsByDateUsingGET1");

            var localVarPath = "/calls/count/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveTotalCallsByDateUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Retrive calls total by date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> RetrieveTotalCallsByDateUsingGET1Async (string date, string sensediaAuth = null, long? apiId = null)
        {
             ApiResponse<long?> localVarResponse = await RetrieveTotalCallsByDateUsingGET1AsyncWithHttpInfo(date, sensediaAuth, apiId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive calls total by date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date searched</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="apiId">API id (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> RetrieveTotalCallsByDateUsingGET1AsyncWithHttpInfo (string date, string sensediaAuth = null, long? apiId = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling CallsApi->RetrieveTotalCallsByDateUsingGET1");

            var localVarPath = "/calls/count/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // path parameter
            if (apiId != null) localVarQueryParams.Add("apiId", Configuration.ApiClient.ParameterToString(apiId)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveTotalCallsByDateUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

    }
}
