/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve App total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        long? CountUsingGET11 (string sensediaAuth = null);

        /// <summary>
        /// Retrieve App total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountUsingGET11WithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Delete a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns></returns>
        void DeleteAppTokenUsingDELETE1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Delete a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAppTokenUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Return all apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;APP&gt;</returns>
        List<APP> GetAppTokenByAppGalleryUsingGET1 (string sensediaAuth = null);

        /// <summary>
        /// Return all apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;APP&gt;</returns>
        ApiResponse<List<APP>> GetAppTokenByAppGalleryUsingGET1WithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Find app list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>List&lt;APP&gt;</returns>
        List<APP> GetAppTokenByFilterUsingGET1 (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null);

        /// <summary>
        /// Find app list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>ApiResponse of List&lt;APP&gt;</returns>
        ApiResponse<List<APP>> GetAppTokenByFilterUsingGET1WithHttpInfo (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null);
        /// <summary>
        /// Find app by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>APP</returns>
        APP GetAppTokenByIdUsingGET1 (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null);

        /// <summary>
        /// Find app by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>ApiResponse of APP</returns>
        ApiResponse<APP> GetAppTokenByIdUsingGET1WithHttpInfo (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null);
        /// <summary>
        /// Retrive changelog per app id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        List<ChangeLogBean> GetAppTokenChangeLogUsingGET1 (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per app id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        ApiResponse<List<ChangeLogBean>> GetAppTokenChangeLogUsingGET1WithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Create a new app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>APPResponse</returns>
        APPResponse PostAppTokenUsingPOST1 (string sensediaAuth = null, APP appTokenBean = null);

        /// <summary>
        /// Create a new app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>ApiResponse of APPResponse</returns>
        ApiResponse<APPResponse> PostAppTokenUsingPOST1WithHttpInfo (string sensediaAuth = null, APP appTokenBean = null);
        /// <summary>
        /// Update a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>APPResponse</returns>
        APPResponse PutAppTokenUsingPUT1 (string id, APP appTokenBean, string sensediaAuth = null);

        /// <summary>
        /// Update a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of APPResponse</returns>
        ApiResponse<APPResponse> PutAppTokenUsingPUT1WithHttpInfo (string id, APP appTokenBean, string sensediaAuth = null);
        /// <summary>
        /// Validate partial app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>Object</returns>
        Object ValidatePartialAppUsingPOST1 (string sensediaAuth = null, APP appTokenBean = null);

        /// <summary>
        /// Validate partial app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ValidatePartialAppUsingPOST1WithHttpInfo (string sensediaAuth = null, APP appTokenBean = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve App total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountUsingGET11Async (string sensediaAuth = null);

        /// <summary>
        /// Retrieve App total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET11AsyncWithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Delete a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAppTokenUsingDELETE1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Delete a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAppTokenUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Return all apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;APP&gt;</returns>
        System.Threading.Tasks.Task<List<APP>> GetAppTokenByAppGalleryUsingGET1Async (string sensediaAuth = null);

        /// <summary>
        /// Return all apps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;APP&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<APP>>> GetAppTokenByAppGalleryUsingGET1AsyncWithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Find app list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>Task of List&lt;APP&gt;</returns>
        System.Threading.Tasks.Task<List<APP>> GetAppTokenByFilterUsingGET1Async (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null);

        /// <summary>
        /// Find app list by filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;APP&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<APP>>> GetAppTokenByFilterUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null);
        /// <summary>
        /// Find app by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>Task of APP</returns>
        System.Threading.Tasks.Task<APP> GetAppTokenByIdUsingGET1Async (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null);

        /// <summary>
        /// Find app by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>Task of ApiResponse (APP)</returns>
        System.Threading.Tasks.Task<ApiResponse<APP>> GetAppTokenByIdUsingGET1AsyncWithHttpInfo (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null);
        /// <summary>
        /// Retrive changelog per app id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        System.Threading.Tasks.Task<List<ChangeLogBean>> GetAppTokenChangeLogUsingGET1Async (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per app id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> GetAppTokenChangeLogUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Create a new app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>Task of APPResponse</returns>
        System.Threading.Tasks.Task<APPResponse> PostAppTokenUsingPOST1Async (string sensediaAuth = null, APP appTokenBean = null);

        /// <summary>
        /// Create a new app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>Task of ApiResponse (APPResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APPResponse>> PostAppTokenUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, APP appTokenBean = null);
        /// <summary>
        /// Update a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of APPResponse</returns>
        System.Threading.Tasks.Task<APPResponse> PutAppTokenUsingPUT1Async (string id, APP appTokenBean, string sensediaAuth = null);

        /// <summary>
        /// Update a app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (APPResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APPResponse>> PutAppTokenUsingPUT1AsyncWithHttpInfo (string id, APP appTokenBean, string sensediaAuth = null);
        /// <summary>
        /// Validate partial app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ValidatePartialAppUsingPOST1Async (string sensediaAuth = null, APP appTokenBean = null);

        /// <summary>
        /// Validate partial app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidatePartialAppUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, APP appTokenBean = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppsApi : IAppsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve App total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        public long? CountUsingGET11 (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = CountUsingGET11WithHttpInfo(sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve App total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountUsingGET11WithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/apps/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET11", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Retrieve App total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountUsingGET11Async (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = await CountUsingGET11AsyncWithHttpInfo(sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve App total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET11AsyncWithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/apps/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET11", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Delete a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns></returns>
        public void DeleteAppTokenUsingDELETE1 (string id, string sensediaAuth = null)
        {
             DeleteAppTokenUsingDELETE1WithHttpInfo(id, sensediaAuth);
        }

        /// <summary>
        /// Delete a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAppTokenUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppsApi->DeleteAppTokenUsingDELETE1");

            var localVarPath = "/apps/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppTokenUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAppTokenUsingDELETE1Async (string id, string sensediaAuth = null)
        {
             await DeleteAppTokenUsingDELETE1AsyncWithHttpInfo(id, sensediaAuth);

        }

        /// <summary>
        /// Delete a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAppTokenUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppsApi->DeleteAppTokenUsingDELETE1");

            var localVarPath = "/apps/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppTokenUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Return all apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;APP&gt;</returns>
        public List<APP> GetAppTokenByAppGalleryUsingGET1 (string sensediaAuth = null)
        {
             ApiResponse<List<APP>> localVarResponse = GetAppTokenByAppGalleryUsingGET1WithHttpInfo(sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;APP&gt;</returns>
        public ApiResponse< List<APP> > GetAppTokenByAppGalleryUsingGET1WithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/apps/gallery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenByAppGalleryUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<APP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<APP>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<APP>)));
        }

        /// <summary>
        /// Return all apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;APP&gt;</returns>
        public async System.Threading.Tasks.Task<List<APP>> GetAppTokenByAppGalleryUsingGET1Async (string sensediaAuth = null)
        {
             ApiResponse<List<APP>> localVarResponse = await GetAppTokenByAppGalleryUsingGET1AsyncWithHttpInfo(sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all apps 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;APP&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<APP>>> GetAppTokenByAppGalleryUsingGET1AsyncWithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/apps/gallery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenByAppGalleryUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<APP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<APP>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<APP>)));
        }

        /// <summary>
        /// Find app list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>List&lt;APP&gt;</returns>
        public List<APP> GetAppTokenByFilterUsingGET1 (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {
             ApiResponse<List<APP>> localVarResponse = GetAppTokenByFilterUsingGET1WithHttpInfo(sensediaAuth, clientId, name, keyword, status, developer, actualPage, pageSize, appIds, beginDate, endDate, extraFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find app list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>ApiResponse of List&lt;APP&gt;</returns>
        public ApiResponse< List<APP> > GetAppTokenByFilterUsingGET1WithHttpInfo (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {

            var localVarPath = "/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarQueryParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (keyword != null) localVarQueryParams.Add("keyword", Configuration.ApiClient.ParameterToString(keyword)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (developer != null) localVarQueryParams.Add("developer", Configuration.ApiClient.ParameterToString(developer)); // query parameter
            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (appIds != null) localVarQueryParams.Add("appIds", Configuration.ApiClient.ParameterToString(appIds)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (extraFields != null) localVarQueryParams.Add("extraFields", Configuration.ApiClient.ParameterToString(extraFields)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenByFilterUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<APP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<APP>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<APP>)));
        }

        /// <summary>
        /// Find app list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>Task of List&lt;APP&gt;</returns>
        public async System.Threading.Tasks.Task<List<APP>> GetAppTokenByFilterUsingGET1Async (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {
             ApiResponse<List<APP>> localVarResponse = await GetAppTokenByFilterUsingGET1AsyncWithHttpInfo(sensediaAuth, clientId, name, keyword, status, developer, actualPage, pageSize, appIds, beginDate, endDate, extraFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find app list by filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="clientId">clientId (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="keyword">keyword (optional)</param>
        /// <param name="status">status (optional)</param>
        /// <param name="developer">developer (optional)</param>
        /// <param name="actualPage">actualPage (optional)</param>
        /// <param name="pageSize">pageSize (optional)</param>
        /// <param name="appIds">appIds (optional)</param>
        /// <param name="beginDate">beginDate (optional)</param>
        /// <param name="endDate">endDate (optional)</param>
        /// <param name="extraFields">extraFields (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;APP&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<APP>>> GetAppTokenByFilterUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string clientId = null, string name = null, string keyword = null, string status = null, string developer = null, int? actualPage = null, int? pageSize = null, string appIds = null, string beginDate = null, string endDate = null, string extraFields = null)
        {

            var localVarPath = "/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarQueryParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (keyword != null) localVarQueryParams.Add("keyword", Configuration.ApiClient.ParameterToString(keyword)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (developer != null) localVarQueryParams.Add("developer", Configuration.ApiClient.ParameterToString(developer)); // query parameter
            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (appIds != null) localVarQueryParams.Add("appIds", Configuration.ApiClient.ParameterToString(appIds)); // query parameter
            if (beginDate != null) localVarQueryParams.Add("beginDate", Configuration.ApiClient.ParameterToString(beginDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (extraFields != null) localVarQueryParams.Add("extraFields", Configuration.ApiClient.ParameterToString(extraFields)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenByFilterUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<APP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<APP>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<APP>)));
        }

        /// <summary>
        /// Find app by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>APP</returns>
        public APP GetAppTokenByIdUsingGET1 (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null)
        {
             ApiResponse<APP> localVarResponse = GetAppTokenByIdUsingGET1WithHttpInfo(code, sensediaAuth, limitAccessTokens, codeAccessTokens, filterAccessTokens);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find app by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>ApiResponse of APP</returns>
        public ApiResponse< APP > GetAppTokenByIdUsingGET1WithHttpInfo (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AppsApi->GetAppTokenByIdUsingGET1");

            var localVarPath = "/apps/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (limitAccessTokens != null) localVarQueryParams.Add("limitAccessTokens", Configuration.ApiClient.ParameterToString(limitAccessTokens)); // query parameter
            if (codeAccessTokens != null) localVarQueryParams.Add("codeAccessTokens", Configuration.ApiClient.ParameterToString(codeAccessTokens)); // query parameter
            if (filterAccessTokens != null) localVarQueryParams.Add("filterAccessTokens", Configuration.ApiClient.ParameterToString(filterAccessTokens)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APP>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APP) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APP)));
        }

        /// <summary>
        /// Find app by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>Task of APP</returns>
        public async System.Threading.Tasks.Task<APP> GetAppTokenByIdUsingGET1Async (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null)
        {
             ApiResponse<APP> localVarResponse = await GetAppTokenByIdUsingGET1AsyncWithHttpInfo(code, sensediaAuth, limitAccessTokens, codeAccessTokens, filterAccessTokens);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find app by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Client ID</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="limitAccessTokens">Limit the access token return (optional)</param>
        /// <param name="codeAccessTokens">Code access token (optional)</param>
        /// <param name="filterAccessTokens">Filter access tokens (optional)</param>
        /// <returns>Task of ApiResponse (APP)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APP>> GetAppTokenByIdUsingGET1AsyncWithHttpInfo (string code, string sensediaAuth = null, int? limitAccessTokens = null, string codeAccessTokens = null, bool? filterAccessTokens = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AppsApi->GetAppTokenByIdUsingGET1");

            var localVarPath = "/apps/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (limitAccessTokens != null) localVarQueryParams.Add("limitAccessTokens", Configuration.ApiClient.ParameterToString(limitAccessTokens)); // query parameter
            if (codeAccessTokens != null) localVarQueryParams.Add("codeAccessTokens", Configuration.ApiClient.ParameterToString(codeAccessTokens)); // query parameter
            if (filterAccessTokens != null) localVarQueryParams.Add("filterAccessTokens", Configuration.ApiClient.ParameterToString(filterAccessTokens)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APP>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APP) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APP)));
        }

        /// <summary>
        /// Retrive changelog per app id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        public List<ChangeLogBean> GetAppTokenChangeLogUsingGET1 (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = GetAppTokenChangeLogUsingGET1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive changelog per app id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        public ApiResponse< List<ChangeLogBean> > GetAppTokenChangeLogUsingGET1WithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppsApi->GetAppTokenChangeLogUsingGET1");

            var localVarPath = "/apps/{code}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Retrive changelog per app id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChangeLogBean>> GetAppTokenChangeLogUsingGET1Async (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = await GetAppTokenChangeLogUsingGET1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive changelog per app id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> GetAppTokenChangeLogUsingGET1AsyncWithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppsApi->GetAppTokenChangeLogUsingGET1");

            var localVarPath = "/apps/{code}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppTokenChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Create a new app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>APPResponse</returns>
        public APPResponse PostAppTokenUsingPOST1 (string sensediaAuth = null, APP appTokenBean = null)
        {
             ApiResponse<APPResponse> localVarResponse = PostAppTokenUsingPOST1WithHttpInfo(sensediaAuth, appTokenBean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>ApiResponse of APPResponse</returns>
        public ApiResponse< APPResponse > PostAppTokenUsingPOST1WithHttpInfo (string sensediaAuth = null, APP appTokenBean = null)
        {

            var localVarPath = "/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (appTokenBean != null && appTokenBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(appTokenBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appTokenBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppTokenUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APPResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APPResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APPResponse)));
        }

        /// <summary>
        /// Create a new app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>Task of APPResponse</returns>
        public async System.Threading.Tasks.Task<APPResponse> PostAppTokenUsingPOST1Async (string sensediaAuth = null, APP appTokenBean = null)
        {
             ApiResponse<APPResponse> localVarResponse = await PostAppTokenUsingPOST1AsyncWithHttpInfo(sensediaAuth, appTokenBean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to create a new app. (optional)</param>
        /// <returns>Task of ApiResponse (APPResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APPResponse>> PostAppTokenUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, APP appTokenBean = null)
        {

            var localVarPath = "/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (appTokenBean != null && appTokenBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(appTokenBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appTokenBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppTokenUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APPResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APPResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APPResponse)));
        }

        /// <summary>
        /// Update a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>APPResponse</returns>
        public APPResponse PutAppTokenUsingPUT1 (string id, APP appTokenBean, string sensediaAuth = null)
        {
             ApiResponse<APPResponse> localVarResponse = PutAppTokenUsingPUT1WithHttpInfo(id, appTokenBean, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of APPResponse</returns>
        public ApiResponse< APPResponse > PutAppTokenUsingPUT1WithHttpInfo (string id, APP appTokenBean, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppsApi->PutAppTokenUsingPUT1");
            // verify the required parameter 'appTokenBean' is set
            if (appTokenBean == null)
                throw new ApiException(400, "Missing required parameter 'appTokenBean' when calling AppsApi->PutAppTokenUsingPUT1");

            var localVarPath = "/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (appTokenBean != null && appTokenBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(appTokenBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appTokenBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAppTokenUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APPResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APPResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APPResponse)));
        }

        /// <summary>
        /// Update a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of APPResponse</returns>
        public async System.Threading.Tasks.Task<APPResponse> PutAppTokenUsingPUT1Async (string id, APP appTokenBean, string sensediaAuth = null)
        {
             ApiResponse<APPResponse> localVarResponse = await PutAppTokenUsingPUT1AsyncWithHttpInfo(id, appTokenBean, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">App json to update a app.</param>
        /// <param name="appTokenBean">appTokenBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (APPResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APPResponse>> PutAppTokenUsingPUT1AsyncWithHttpInfo (string id, APP appTokenBean, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppsApi->PutAppTokenUsingPUT1");
            // verify the required parameter 'appTokenBean' is set
            if (appTokenBean == null)
                throw new ApiException(400, "Missing required parameter 'appTokenBean' when calling AppsApi->PutAppTokenUsingPUT1");

            var localVarPath = "/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (appTokenBean != null && appTokenBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(appTokenBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appTokenBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAppTokenUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APPResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (APPResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(APPResponse)));
        }

        /// <summary>
        /// Validate partial app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>Object</returns>
        public Object ValidatePartialAppUsingPOST1 (string sensediaAuth = null, APP appTokenBean = null)
        {
             ApiResponse<Object> localVarResponse = ValidatePartialAppUsingPOST1WithHttpInfo(sensediaAuth, appTokenBean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate partial app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ValidatePartialAppUsingPOST1WithHttpInfo (string sensediaAuth = null, APP appTokenBean = null)
        {

            var localVarPath = "/apps/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (appTokenBean != null && appTokenBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(appTokenBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appTokenBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialAppUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Validate partial app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ValidatePartialAppUsingPOST1Async (string sensediaAuth = null, APP appTokenBean = null)
        {
             ApiResponse<Object> localVarResponse = await ValidatePartialAppUsingPOST1AsyncWithHttpInfo(sensediaAuth, appTokenBean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate partial app 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="appTokenBean">App json to validate app (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidatePartialAppUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, APP appTokenBean = null)
        {

            var localVarPath = "/apps/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (appTokenBean != null && appTokenBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(appTokenBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appTokenBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialAppUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
