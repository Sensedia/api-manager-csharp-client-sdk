/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevelopersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve developers total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        long? CountUsingGET12 (string sensediaAuth = null);

        /// <summary>
        /// Retrieve developers total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountUsingGET12WithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Create or update developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Developer</returns>
        Developer CreateOrUpdateDeveloper1 (string login, Developer bean, string sensediaAuth = null);

        /// <summary>
        /// Create or update developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Developer</returns>
        ApiResponse<Developer> CreateOrUpdateDeveloper1WithHttpInfo (string login, Developer bean, string sensediaAuth = null);
        /// <summary>
        /// Delete developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns></returns>
        void RemoveUserAccountUsingDELETE1 (string login, string sensediaAuth = null);

        /// <summary>
        /// Delete developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserAccountUsingDELETE1WithHttpInfo (string login, string sensediaAuth = null);
        /// <summary>
        /// Retrive developer per Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Developer</returns>
        Developer RetieveUserAccountUsingGET1 (string login, string sensediaAuth = null);

        /// <summary>
        /// Retrive developer per Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Developer</returns>
        ApiResponse<Developer> RetieveUserAccountUsingGET1WithHttpInfo (string login, string sensediaAuth = null);
        /// <summary>
        /// Retrive audit developer per username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        List<ChangeLogBean> RetrieveAccountChangeLogUsingGET1 (string username, string sensediaAuth = null);

        /// <summary>
        /// Retrive audit developer per username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        ApiResponse<List<ChangeLogBean>> RetrieveAccountChangeLogUsingGET1WithHttpInfo (string username, string sensediaAuth = null);
        /// <summary>
        /// Retrive developers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>List&lt;Developer&gt;</returns>
        List<Developer> RetrieveUserAccountsUsingGET1 (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null);

        /// <summary>
        /// Retrive developers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>ApiResponse of List&lt;Developer&gt;</returns>
        ApiResponse<List<Developer>> RetrieveUserAccountsUsingGET1WithHttpInfo (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve developers total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountUsingGET12Async (string sensediaAuth = null);

        /// <summary>
        /// Retrieve developers total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET12AsyncWithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Create or update developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of Developer</returns>
        System.Threading.Tasks.Task<Developer> CreateOrUpdateDeveloper1Async (string login, Developer bean, string sensediaAuth = null);

        /// <summary>
        /// Create or update developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (Developer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Developer>> CreateOrUpdateDeveloper1AsyncWithHttpInfo (string login, Developer bean, string sensediaAuth = null);
        /// <summary>
        /// Delete developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserAccountUsingDELETE1Async (string login, string sensediaAuth = null);

        /// <summary>
        /// Delete developer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserAccountUsingDELETE1AsyncWithHttpInfo (string login, string sensediaAuth = null);
        /// <summary>
        /// Retrive developer per Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of Developer</returns>
        System.Threading.Tasks.Task<Developer> RetieveUserAccountUsingGET1Async (string login, string sensediaAuth = null);

        /// <summary>
        /// Retrive developer per Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (Developer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Developer>> RetieveUserAccountUsingGET1AsyncWithHttpInfo (string login, string sensediaAuth = null);
        /// <summary>
        /// Retrive audit developer per username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        System.Threading.Tasks.Task<List<ChangeLogBean>> RetrieveAccountChangeLogUsingGET1Async (string username, string sensediaAuth = null);

        /// <summary>
        /// Retrive audit developer per username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> RetrieveAccountChangeLogUsingGET1AsyncWithHttpInfo (string username, string sensediaAuth = null);
        /// <summary>
        /// Retrive developers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>Task of List&lt;Developer&gt;</returns>
        System.Threading.Tasks.Task<List<Developer>> RetrieveUserAccountsUsingGET1Async (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null);

        /// <summary>
        /// Retrive developers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Developer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Developer>>> RetrieveUserAccountsUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevelopersApi : IDevelopersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevelopersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevelopersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevelopersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevelopersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve developers total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        public long? CountUsingGET12 (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = CountUsingGET12WithHttpInfo(sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve developers total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountUsingGET12WithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/developers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Retrieve developers total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountUsingGET12Async (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = await CountUsingGET12AsyncWithHttpInfo(sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve developers total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET12AsyncWithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/developers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Create or update developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Developer</returns>
        public Developer CreateOrUpdateDeveloper1 (string login, Developer bean, string sensediaAuth = null)
        {
             ApiResponse<Developer> localVarResponse = CreateOrUpdateDeveloper1WithHttpInfo(login, bean, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Developer</returns>
        public ApiResponse< Developer > CreateOrUpdateDeveloper1WithHttpInfo (string login, Developer bean, string sensediaAuth = null)
        {
            // verify the required parameter 'login' is set
            if (login == null)
                throw new ApiException(400, "Missing required parameter 'login' when calling DevelopersApi->CreateOrUpdateDeveloper1");
            // verify the required parameter 'bean' is set
            if (bean == null)
                throw new ApiException(400, "Missing required parameter 'bean' when calling DevelopersApi->CreateOrUpdateDeveloper1");

            var localVarPath = "/developers/{login}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null) localVarPathParams.Add("login", Configuration.ApiClient.ParameterToString(login)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateDeveloper1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Developer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Developer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Developer)));
        }

        /// <summary>
        /// Create or update developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of Developer</returns>
        public async System.Threading.Tasks.Task<Developer> CreateOrUpdateDeveloper1Async (string login, Developer bean, string sensediaAuth = null)
        {
             ApiResponse<Developer> localVarResponse = await CreateOrUpdateDeveloper1AsyncWithHttpInfo(login, bean, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="bean">bean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (Developer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Developer>> CreateOrUpdateDeveloper1AsyncWithHttpInfo (string login, Developer bean, string sensediaAuth = null)
        {
            // verify the required parameter 'login' is set
            if (login == null)
                throw new ApiException(400, "Missing required parameter 'login' when calling DevelopersApi->CreateOrUpdateDeveloper1");
            // verify the required parameter 'bean' is set
            if (bean == null)
                throw new ApiException(400, "Missing required parameter 'bean' when calling DevelopersApi->CreateOrUpdateDeveloper1");

            var localVarPath = "/developers/{login}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null) localVarPathParams.Add("login", Configuration.ApiClient.ParameterToString(login)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (bean != null && bean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateDeveloper1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Developer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Developer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Developer)));
        }

        /// <summary>
        /// Delete developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns></returns>
        public void RemoveUserAccountUsingDELETE1 (string login, string sensediaAuth = null)
        {
             RemoveUserAccountUsingDELETE1WithHttpInfo(login, sensediaAuth);
        }

        /// <summary>
        /// Delete developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveUserAccountUsingDELETE1WithHttpInfo (string login, string sensediaAuth = null)
        {
            // verify the required parameter 'login' is set
            if (login == null)
                throw new ApiException(400, "Missing required parameter 'login' when calling DevelopersApi->RemoveUserAccountUsingDELETE1");

            var localVarPath = "/developers/{login}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null) localVarPathParams.Add("login", Configuration.ApiClient.ParameterToString(login)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserAccountUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserAccountUsingDELETE1Async (string login, string sensediaAuth = null)
        {
             await RemoveUserAccountUsingDELETE1AsyncWithHttpInfo(login, sensediaAuth);

        }

        /// <summary>
        /// Delete developer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserAccountUsingDELETE1AsyncWithHttpInfo (string login, string sensediaAuth = null)
        {
            // verify the required parameter 'login' is set
            if (login == null)
                throw new ApiException(400, "Missing required parameter 'login' when calling DevelopersApi->RemoveUserAccountUsingDELETE1");

            var localVarPath = "/developers/{login}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null) localVarPathParams.Add("login", Configuration.ApiClient.ParameterToString(login)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserAccountUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrive developer per Login 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Developer</returns>
        public Developer RetieveUserAccountUsingGET1 (string login, string sensediaAuth = null)
        {
             ApiResponse<Developer> localVarResponse = RetieveUserAccountUsingGET1WithHttpInfo(login, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive developer per Login 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of Developer</returns>
        public ApiResponse< Developer > RetieveUserAccountUsingGET1WithHttpInfo (string login, string sensediaAuth = null)
        {
            // verify the required parameter 'login' is set
            if (login == null)
                throw new ApiException(400, "Missing required parameter 'login' when calling DevelopersApi->RetieveUserAccountUsingGET1");

            var localVarPath = "/developers/{login}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null) localVarPathParams.Add("login", Configuration.ApiClient.ParameterToString(login)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetieveUserAccountUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Developer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Developer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Developer)));
        }

        /// <summary>
        /// Retrive developer per Login 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of Developer</returns>
        public async System.Threading.Tasks.Task<Developer> RetieveUserAccountUsingGET1Async (string login, string sensediaAuth = null)
        {
             ApiResponse<Developer> localVarResponse = await RetieveUserAccountUsingGET1AsyncWithHttpInfo(login, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive developer per Login 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login">Developer Login</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (Developer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Developer>> RetieveUserAccountUsingGET1AsyncWithHttpInfo (string login, string sensediaAuth = null)
        {
            // verify the required parameter 'login' is set
            if (login == null)
                throw new ApiException(400, "Missing required parameter 'login' when calling DevelopersApi->RetieveUserAccountUsingGET1");

            var localVarPath = "/developers/{login}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null) localVarPathParams.Add("login", Configuration.ApiClient.ParameterToString(login)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetieveUserAccountUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Developer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Developer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Developer)));
        }

        /// <summary>
        /// Retrive audit developer per username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        public List<ChangeLogBean> RetrieveAccountChangeLogUsingGET1 (string username, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = RetrieveAccountChangeLogUsingGET1WithHttpInfo(username, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive audit developer per username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        public ApiResponse< List<ChangeLogBean> > RetrieveAccountChangeLogUsingGET1WithHttpInfo (string username, string sensediaAuth = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevelopersApi->RetrieveAccountChangeLogUsingGET1");

            var localVarPath = "/developers/{username}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAccountChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Retrive audit developer per username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChangeLogBean>> RetrieveAccountChangeLogUsingGET1Async (string username, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = await RetrieveAccountChangeLogUsingGET1AsyncWithHttpInfo(username, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive audit developer per username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Developer username</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> RetrieveAccountChangeLogUsingGET1AsyncWithHttpInfo (string username, string sensediaAuth = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DevelopersApi->RetrieveAccountChangeLogUsingGET1");

            var localVarPath = "/developers/{username}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAccountChangeLogUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Retrive developers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>List&lt;Developer&gt;</returns>
        public List<Developer> RetrieveUserAccountsUsingGET1 (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null)
        {
             ApiResponse<List<Developer>> localVarResponse = RetrieveUserAccountsUsingGET1WithHttpInfo(sensediaAuth, loginOrEmail, name, email, actualPage, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive developers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>ApiResponse of List&lt;Developer&gt;</returns>
        public ApiResponse< List<Developer> > RetrieveUserAccountsUsingGET1WithHttpInfo (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null)
        {

            var localVarPath = "/developers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginOrEmail != null) localVarQueryParams.Add("loginOrEmail", Configuration.ApiClient.ParameterToString(loginOrEmail)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveUserAccountsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Developer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Developer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Developer>)));
        }

        /// <summary>
        /// Retrive developers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>Task of List&lt;Developer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Developer>> RetrieveUserAccountsUsingGET1Async (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null)
        {
             ApiResponse<List<Developer>> localVarResponse = await RetrieveUserAccountsUsingGET1AsyncWithHttpInfo(sensediaAuth, loginOrEmail, name, email, actualPage, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive developers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="loginOrEmail">Login or E-mail (optional)</param>
        /// <param name="name">Developer Name (optional)</param>
        /// <param name="email">Developer E-mail (optional)</param>
        /// <param name="actualPage">Number of the page in pagination. The starting page number is zero. (optional)</param>
        /// <param name="pageSize">Define the size of the returned list of developers. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Developer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Developer>>> RetrieveUserAccountsUsingGET1AsyncWithHttpInfo (string sensediaAuth = null, string loginOrEmail = null, string name = null, string email = null, int? actualPage = null, int? pageSize = null)
        {

            var localVarPath = "/developers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginOrEmail != null) localVarQueryParams.Add("loginOrEmail", Configuration.ApiClient.ParameterToString(loginOrEmail)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (actualPage != null) localVarQueryParams.Add("actualPage", Configuration.ApiClient.ParameterToString(actualPage)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveUserAccountsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Developer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Developer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Developer>)));
        }

    }
}
