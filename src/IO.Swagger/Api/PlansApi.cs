/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clone a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        PlanResponse ClonePlanUsingPOST1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Clone a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        ApiResponse<PlanResponse> ClonePlanUsingPOST1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrieve plan total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        long? CountUsingGET13 (string sensediaAuth = null);

        /// <summary>
        /// Retrieve plan total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountUsingGET13WithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeletePlanUsingDELETE1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeletePlanUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrive changelog per plan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        List<ChangeLogBean> GetPlanChangeLogUsingGET3 (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per plan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        ApiResponse<List<ChangeLogBean>> GetPlanChangeLogUsingGET3WithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Find default plan by api id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        PlanResponse GetPlanDefaultByApiUsingGET1 (string id, string sensediaAuth = null);

        /// <summary>
        /// Find default plan by api id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        ApiResponse<PlanResponse> GetPlanDefaultByApiUsingGET1WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Find plan by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        PlanResponse GetPlanUsingGET2 (string id, string sensediaAuth = null);

        /// <summary>
        /// Find plan by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        ApiResponse<PlanResponse> GetPlanUsingGET2WithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Return all plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;PlanResponse&gt;</returns>
        List<PlanResponse> GetPlanUsingGET3 (string sensediaAuth = null);

        /// <summary>
        /// Return all plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;PlanResponse&gt;</returns>
        ApiResponse<List<PlanResponse>> GetPlanUsingGET3WithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        PlanResponse PostPlanUsingPOST1 (PlanResponse planBean, string sensediaAuth = null);

        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        ApiResponse<PlanResponse> PostPlanUsingPOST1WithHttpInfo (PlanResponse planBean, string sensediaAuth = null);
        /// <summary>
        /// Update a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>PlanResponse</returns>
        PlanResponse PutPlanUsingPUT1 (string id, string sensediaAuth = null, PlanResponse planBean = null);

        /// <summary>
        /// Update a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        ApiResponse<PlanResponse> PutPlanUsingPUT1WithHttpInfo (string id, string sensediaAuth = null, PlanResponse planBean = null);
        /// <summary>
        /// Validate partial a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ValidatePartialPlanUsingPOST1 (string sensediaAuth = null, PlanResponse planBean = null);

        /// <summary>
        /// Validate partial a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ValidatePartialPlanUsingPOST1WithHttpInfo (string sensediaAuth = null, PlanResponse planBean = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clone a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        System.Threading.Tasks.Task<PlanResponse> ClonePlanUsingPOST1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Clone a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanResponse>> ClonePlanUsingPOST1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrieve plan total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountUsingGET13Async (string sensediaAuth = null);

        /// <summary>
        /// Retrieve plan total
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET13AsyncWithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeletePlanUsingDELETE1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeletePlanUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Retrive changelog per plan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        System.Threading.Tasks.Task<List<ChangeLogBean>> GetPlanChangeLogUsingGET3Async (long? id, string sensediaAuth = null);

        /// <summary>
        /// Retrive changelog per plan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> GetPlanChangeLogUsingGET3AsyncWithHttpInfo (long? id, string sensediaAuth = null);
        /// <summary>
        /// Find default plan by api id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        System.Threading.Tasks.Task<PlanResponse> GetPlanDefaultByApiUsingGET1Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Find default plan by api id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanResponse>> GetPlanDefaultByApiUsingGET1AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Find plan by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        System.Threading.Tasks.Task<PlanResponse> GetPlanUsingGET2Async (string id, string sensediaAuth = null);

        /// <summary>
        /// Find plan by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanResponse>> GetPlanUsingGET2AsyncWithHttpInfo (string id, string sensediaAuth = null);
        /// <summary>
        /// Return all plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;PlanResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PlanResponse>> GetPlanUsingGET3Async (string sensediaAuth = null);

        /// <summary>
        /// Return all plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PlanResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlanResponse>>> GetPlanUsingGET3AsyncWithHttpInfo (string sensediaAuth = null);
        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        System.Threading.Tasks.Task<PlanResponse> PostPlanUsingPOST1Async (PlanResponse planBean, string sensediaAuth = null);

        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanResponse>> PostPlanUsingPOST1AsyncWithHttpInfo (PlanResponse planBean, string sensediaAuth = null);
        /// <summary>
        /// Update a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        System.Threading.Tasks.Task<PlanResponse> PutPlanUsingPUT1Async (string id, string sensediaAuth = null, PlanResponse planBean = null);

        /// <summary>
        /// Update a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanResponse>> PutPlanUsingPUT1AsyncWithHttpInfo (string id, string sensediaAuth = null, PlanResponse planBean = null);
        /// <summary>
        /// Validate partial a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ValidatePartialPlanUsingPOST1Async (string sensediaAuth = null, PlanResponse planBean = null);

        /// <summary>
        /// Validate partial a plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ValidatePartialPlanUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, PlanResponse planBean = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlansApi : IPlansApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlansApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlansApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clone a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        public PlanResponse ClonePlanUsingPOST1 (string id, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = ClonePlanUsingPOST1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        public ApiResponse< PlanResponse > ClonePlanUsingPOST1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->ClonePlanUsingPOST1");

            var localVarPath = "/plans/{id}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClonePlanUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Clone a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        public async System.Threading.Tasks.Task<PlanResponse> ClonePlanUsingPOST1Async (string id, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = await ClonePlanUsingPOST1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlanResponse>> ClonePlanUsingPOST1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->ClonePlanUsingPOST1");

            var localVarPath = "/plans/{id}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClonePlanUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Retrieve plan total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>long?</returns>
        public long? CountUsingGET13 (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = CountUsingGET13WithHttpInfo(sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve plan total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountUsingGET13WithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/plans/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Retrieve plan total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountUsingGET13Async (string sensediaAuth = null)
        {
             ApiResponse<long?> localVarResponse = await CountUsingGET13AsyncWithHttpInfo(sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve plan total 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountUsingGET13AsyncWithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/plans/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountUsingGET13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Delete a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeletePlanUsingDELETE1 (string id, string sensediaAuth = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeletePlanUsingDELETE1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeletePlanUsingDELETE1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->DeletePlanUsingDELETE1");

            var localVarPath = "/plans/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlanUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeletePlanUsingDELETE1Async (string id, string sensediaAuth = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeletePlanUsingDELETE1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeletePlanUsingDELETE1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->DeletePlanUsingDELETE1");

            var localVarPath = "/plans/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlanUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Retrive changelog per plan id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;ChangeLogBean&gt;</returns>
        public List<ChangeLogBean> GetPlanChangeLogUsingGET3 (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = GetPlanChangeLogUsingGET3WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrive changelog per plan id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;ChangeLogBean&gt;</returns>
        public ApiResponse< List<ChangeLogBean> > GetPlanChangeLogUsingGET3WithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlanChangeLogUsingGET3");

            var localVarPath = "/plans/{id}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanChangeLogUsingGET3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Retrive changelog per plan id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;ChangeLogBean&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChangeLogBean>> GetPlanChangeLogUsingGET3Async (long? id, string sensediaAuth = null)
        {
             ApiResponse<List<ChangeLogBean>> localVarResponse = await GetPlanChangeLogUsingGET3AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrive changelog per plan id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChangeLogBean&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChangeLogBean>>> GetPlanChangeLogUsingGET3AsyncWithHttpInfo (long? id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlanChangeLogUsingGET3");

            var localVarPath = "/plans/{id}/changelog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanChangeLogUsingGET3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChangeLogBean>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChangeLogBean>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChangeLogBean>)));
        }

        /// <summary>
        /// Find default plan by api id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        public PlanResponse GetPlanDefaultByApiUsingGET1 (string id, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = GetPlanDefaultByApiUsingGET1WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find default plan by api id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        public ApiResponse< PlanResponse > GetPlanDefaultByApiUsingGET1WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlanDefaultByApiUsingGET1");

            var localVarPath = "/plans/{id}/defaultPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanDefaultByApiUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Find default plan by api id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        public async System.Threading.Tasks.Task<PlanResponse> GetPlanDefaultByApiUsingGET1Async (string id, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = await GetPlanDefaultByApiUsingGET1AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find default plan by api id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Api id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlanResponse>> GetPlanDefaultByApiUsingGET1AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlanDefaultByApiUsingGET1");

            var localVarPath = "/plans/{id}/defaultPlan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanDefaultByApiUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Find plan by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        public PlanResponse GetPlanUsingGET2 (string id, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = GetPlanUsingGET2WithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find plan by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        public ApiResponse< PlanResponse > GetPlanUsingGET2WithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlanUsingGET2");

            var localVarPath = "/plans/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanUsingGET2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Find plan by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        public async System.Threading.Tasks.Task<PlanResponse> GetPlanUsingGET2Async (string id, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = await GetPlanUsingGET2AsyncWithHttpInfo(id, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find plan by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlanResponse>> GetPlanUsingGET2AsyncWithHttpInfo (string id, string sensediaAuth = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlanUsingGET2");

            var localVarPath = "/plans/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanUsingGET2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Return all plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>List&lt;PlanResponse&gt;</returns>
        public List<PlanResponse> GetPlanUsingGET3 (string sensediaAuth = null)
        {
             ApiResponse<List<PlanResponse>> localVarResponse = GetPlanUsingGET3WithHttpInfo(sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of List&lt;PlanResponse&gt;</returns>
        public ApiResponse< List<PlanResponse> > GetPlanUsingGET3WithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanUsingGET3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlanResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PlanResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlanResponse>)));
        }

        /// <summary>
        /// Return all plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of List&lt;PlanResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlanResponse>> GetPlanUsingGET3Async (string sensediaAuth = null)
        {
             ApiResponse<List<PlanResponse>> localVarResponse = await GetPlanUsingGET3AsyncWithHttpInfo(sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PlanResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PlanResponse>>> GetPlanUsingGET3AsyncWithHttpInfo (string sensediaAuth = null)
        {

            var localVarPath = "/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanUsingGET3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlanResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PlanResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlanResponse>)));
        }

        /// <summary>
        /// Create a new plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>PlanResponse</returns>
        public PlanResponse PostPlanUsingPOST1 (PlanResponse planBean, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = PostPlanUsingPOST1WithHttpInfo(planBean, sensediaAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        public ApiResponse< PlanResponse > PostPlanUsingPOST1WithHttpInfo (PlanResponse planBean, string sensediaAuth = null)
        {
            // verify the required parameter 'planBean' is set
            if (planBean == null)
                throw new ApiException(400, "Missing required parameter 'planBean' when calling PlansApi->PostPlanUsingPOST1");

            var localVarPath = "/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (planBean != null && planBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(planBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPlanUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Create a new plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        public async System.Threading.Tasks.Task<PlanResponse> PostPlanUsingPOST1Async (PlanResponse planBean, string sensediaAuth = null)
        {
             ApiResponse<PlanResponse> localVarResponse = await PostPlanUsingPOST1AsyncWithHttpInfo(planBean, sensediaAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planBean">planBean</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlanResponse>> PostPlanUsingPOST1AsyncWithHttpInfo (PlanResponse planBean, string sensediaAuth = null)
        {
            // verify the required parameter 'planBean' is set
            if (planBean == null)
                throw new ApiException(400, "Missing required parameter 'planBean' when calling PlansApi->PostPlanUsingPOST1");

            var localVarPath = "/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (planBean != null && planBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(planBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPlanUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Update a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>PlanResponse</returns>
        public PlanResponse PutPlanUsingPUT1 (string id, string sensediaAuth = null, PlanResponse planBean = null)
        {
             ApiResponse<PlanResponse> localVarResponse = PutPlanUsingPUT1WithHttpInfo(id, sensediaAuth, planBean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>ApiResponse of PlanResponse</returns>
        public ApiResponse< PlanResponse > PutPlanUsingPUT1WithHttpInfo (string id, string sensediaAuth = null, PlanResponse planBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->PutPlanUsingPUT1");

            var localVarPath = "/plans/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (planBean != null && planBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(planBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPlanUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Update a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>Task of PlanResponse</returns>
        public async System.Threading.Tasks.Task<PlanResponse> PutPlanUsingPUT1Async (string id, string sensediaAuth = null, PlanResponse planBean = null)
        {
             ApiResponse<PlanResponse> localVarResponse = await PutPlanUsingPUT1AsyncWithHttpInfo(id, sensediaAuth, planBean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan id</param>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to update a plan (optional)</param>
        /// <returns>Task of ApiResponse (PlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlanResponse>> PutPlanUsingPUT1AsyncWithHttpInfo (string id, string sensediaAuth = null, PlanResponse planBean = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->PutPlanUsingPUT1");

            var localVarPath = "/plans/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (planBean != null && planBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(planBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPlanUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResponse)));
        }

        /// <summary>
        /// Validate partial a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ValidatePartialPlanUsingPOST1 (string sensediaAuth = null, PlanResponse planBean = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ValidatePartialPlanUsingPOST1WithHttpInfo(sensediaAuth, planBean);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate partial a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ValidatePartialPlanUsingPOST1WithHttpInfo (string sensediaAuth = null, PlanResponse planBean = null)
        {

            var localVarPath = "/plans/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (planBean != null && planBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(planBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialPlanUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Validate partial a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ValidatePartialPlanUsingPOST1Async (string sensediaAuth = null, PlanResponse planBean = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ValidatePartialPlanUsingPOST1AsyncWithHttpInfo(sensediaAuth, planBean);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate partial a plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensediaAuth">Sensedia-Auth (optional)</param>
        /// <param name="planBean">Plan json to validate a plan (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ValidatePartialPlanUsingPOST1AsyncWithHttpInfo (string sensediaAuth = null, PlanResponse planBean = null)
        {

            var localVarPath = "/plans/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensediaAuth != null) localVarHeaderParams.Add("Sensedia-Auth", Configuration.ApiClient.ParameterToString(sensediaAuth)); // header parameter
            if (planBean != null && planBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(planBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidatePartialPlanUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

    }
}
