/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// APP model
    /// </summary>
    [DataContract]
    public partial class APP :  IEquatable<APP>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum APPROVED for "APPROVED"
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED,
            
            /// <summary>
            /// Enum PENDING for "PENDING"
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING,
            
            /// <summary>
            /// Enum REJECTED for "REJECTED"
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED,
            
            /// <summary>
            /// Enum CANCELLED for "CANCELLED"
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="APP" /> class.
        /// </summary>
        /// <param name="AccessTokens">AccessTokens.</param>
        /// <param name="Apis">Apis.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Developer">Developer.</param>
        /// <param name="ExtraInfo">ExtraInfo.</param>
        /// <param name="Icon">Icon.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Link">Link.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Secret">Secret.</param>
        /// <param name="ShowAppGallery">ShowAppGallery.</param>
        /// <param name="Status">Status.</param>
        public APP(List<AuthTokenSimpleBean> AccessTokens = default(List<AuthTokenSimpleBean>), List<APISimpleBean> Apis = default(List<APISimpleBean>), string ClientId = default(string), DateTime? CreationDate = default(DateTime?), string Description = default(string), string Developer = default(string), Object ExtraInfo = default(Object), string Icon = default(string), long? Id = default(long?), string Link = default(string), string Name = default(string), string Secret = default(string), bool? ShowAppGallery = default(bool?), StatusEnum? Status = default(StatusEnum?))
        {
            this.AccessTokens = AccessTokens;
            this.Apis = Apis;
            this.ClientId = ClientId;
            this.CreationDate = CreationDate;
            this.Description = Description;
            this.Developer = Developer;
            this.ExtraInfo = ExtraInfo;
            this.Icon = Icon;
            this.Id = Id;
            this.Link = Link;
            this.Name = Name;
            this.Secret = Secret;
            this.ShowAppGallery = ShowAppGallery;
            this.Status = Status;
        }
        
        /// <summary>
        /// Gets or Sets AccessTokens
        /// </summary>
        [DataMember(Name="accessTokens", EmitDefaultValue=false)]
        public List<AuthTokenSimpleBean> AccessTokens { get; set; }

        /// <summary>
        /// Gets or Sets Apis
        /// </summary>
        [DataMember(Name="apis", EmitDefaultValue=false)]
        public List<APISimpleBean> Apis { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Developer
        /// </summary>
        [DataMember(Name="developer", EmitDefaultValue=false)]
        public string Developer { get; set; }

        /// <summary>
        /// Gets or Sets ExtraInfo
        /// </summary>
        [DataMember(Name="extraInfo", EmitDefaultValue=false)]
        public Object ExtraInfo { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets ShowAppGallery
        /// </summary>
        [DataMember(Name="showAppGallery", EmitDefaultValue=false)]
        public bool? ShowAppGallery { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class APP {\n");
            sb.Append("  AccessTokens: ").Append(AccessTokens).Append("\n");
            sb.Append("  Apis: ").Append(Apis).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Developer: ").Append(Developer).Append("\n");
            sb.Append("  ExtraInfo: ").Append(ExtraInfo).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  ShowAppGallery: ").Append(ShowAppGallery).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as APP);
        }

        /// <summary>
        /// Returns true if APP instances are equal
        /// </summary>
        /// <param name="other">Instance of APP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APP other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessTokens == other.AccessTokens ||
                    this.AccessTokens != null &&
                    this.AccessTokens.SequenceEqual(other.AccessTokens)
                ) && 
                (
                    this.Apis == other.Apis ||
                    this.Apis != null &&
                    this.Apis.SequenceEqual(other.Apis)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Developer == other.Developer ||
                    this.Developer != null &&
                    this.Developer.Equals(other.Developer)
                ) && 
                (
                    this.ExtraInfo == other.ExtraInfo ||
                    this.ExtraInfo != null &&
                    this.ExtraInfo.Equals(other.ExtraInfo)
                ) && 
                (
                    this.Icon == other.Icon ||
                    this.Icon != null &&
                    this.Icon.Equals(other.Icon)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Secret == other.Secret ||
                    this.Secret != null &&
                    this.Secret.Equals(other.Secret)
                ) && 
                (
                    this.ShowAppGallery == other.ShowAppGallery ||
                    this.ShowAppGallery != null &&
                    this.ShowAppGallery.Equals(other.ShowAppGallery)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessTokens != null)
                    hash = hash * 59 + this.AccessTokens.GetHashCode();
                if (this.Apis != null)
                    hash = hash * 59 + this.Apis.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Developer != null)
                    hash = hash * 59 + this.Developer.GetHashCode();
                if (this.ExtraInfo != null)
                    hash = hash * 59 + this.ExtraInfo.GetHashCode();
                if (this.Icon != null)
                    hash = hash * 59 + this.Icon.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Secret != null)
                    hash = hash * 59 + this.Secret.GetHashCode();
                if (this.ShowAppGallery != null)
                    hash = hash * 59 + this.ShowAppGallery.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
