/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CallsMetric
    /// </summary>
    [DataContract]
    public partial class CallsMetric :  IEquatable<CallsMetric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallsMetric" /> class.
        /// </summary>
        /// <param name="Blocked">Blocked.</param>
        /// <param name="ClientError">ClientError.</param>
        /// <param name="Count">Count.</param>
        /// <param name="Date">Date.</param>
        /// <param name="Error">Error.</param>
        /// <param name="ServerError">ServerError.</param>
        /// <param name="Success">Success.</param>
        public CallsMetric(long? Blocked = default(long?), long? ClientError = default(long?), long? Count = default(long?), DateTime? Date = default(DateTime?), long? Error = default(long?), long? ServerError = default(long?), long? Success = default(long?))
        {
            this.Blocked = Blocked;
            this.ClientError = ClientError;
            this.Count = Count;
            this.Date = Date;
            this.Error = Error;
            this.ServerError = ServerError;
            this.Success = Success;
        }
        
        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public long? Blocked { get; set; }

        /// <summary>
        /// Gets or Sets ClientError
        /// </summary>
        [DataMember(Name="clientError", EmitDefaultValue=false)]
        public long? ClientError { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public long? Error { get; set; }

        /// <summary>
        /// Gets or Sets ServerError
        /// </summary>
        [DataMember(Name="serverError", EmitDefaultValue=false)]
        public long? ServerError { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public long? Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsMetric {\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  ClientError: ").Append(ClientError).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ServerError: ").Append(ServerError).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CallsMetric);
        }

        /// <summary>
        /// Returns true if CallsMetric instances are equal
        /// </summary>
        /// <param name="other">Instance of CallsMetric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsMetric other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Blocked == other.Blocked ||
                    this.Blocked != null &&
                    this.Blocked.Equals(other.Blocked)
                ) && 
                (
                    this.ClientError == other.ClientError ||
                    this.ClientError != null &&
                    this.ClientError.Equals(other.ClientError)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.ServerError == other.ServerError ||
                    this.ServerError != null &&
                    this.ServerError.Equals(other.ServerError)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Blocked != null)
                    hash = hash * 59 + this.Blocked.GetHashCode();
                if (this.ClientError != null)
                    hash = hash * 59 + this.ClientError.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.ServerError != null)
                    hash = hash * 59 + this.ServerError.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
