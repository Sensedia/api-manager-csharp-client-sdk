/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InterceptorBean
    /// </summary>
    [DataContract]
    public partial class InterceptorBean :  IEquatable<InterceptorBean>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ExecutionPoint
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionPointEnum
        {
            
            /// <summary>
            /// Enum FIRST for "FIRST"
            /// </summary>
            [EnumMember(Value = "FIRST")]
            FIRST,
            
            /// <summary>
            /// Enum SECOND for "SECOND"
            /// </summary>
            [EnumMember(Value = "SECOND")]
            SECOND,
            
            /// <summary>
            /// Enum ANY for "ANY"
            /// </summary>
            [EnumMember(Value = "ANY")]
            ANY
        }

        /// <summary>
        /// Gets or Sets ParentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParentTypeEnum
        {
            
            /// <summary>
            /// Enum REVISION for "REVISION"
            /// </summary>
            [EnumMember(Value = "REVISION")]
            REVISION,
            
            /// <summary>
            /// Enum RESOURCE for "RESOURCE"
            /// </summary>
            [EnumMember(Value = "RESOURCE")]
            RESOURCE,
            
            /// <summary>
            /// Enum OPERATION for "OPERATION"
            /// </summary>
            [EnumMember(Value = "OPERATION")]
            OPERATION,
            
            /// <summary>
            /// Enum PLAN for "PLAN"
            /// </summary>
            [EnumMember(Value = "PLAN")]
            PLAN
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CHANGEDVALUE for "CHANGED_VALUE"
            /// </summary>
            [EnumMember(Value = "CHANGED_VALUE")]
            CHANGEDVALUE,
            
            /// <summary>
            /// Enum REFERENCE for "REFERENCE"
            /// </summary>
            [EnumMember(Value = "REFERENCE")]
            REFERENCE,
            
            /// <summary>
            /// Enum REMOVED for "REMOVED"
            /// </summary>
            [EnumMember(Value = "REMOVED")]
            REMOVED
        }

        /// <summary>
        /// Gets or Sets ExecutionPoint
        /// </summary>
        [DataMember(Name="executionPoint", EmitDefaultValue=false)]
        public ExecutionPointEnum? ExecutionPoint { get; set; }
        /// <summary>
        /// Gets or Sets ParentType
        /// </summary>
        [DataMember(Name="parentType", EmitDefaultValue=false)]
        public ParentTypeEnum? ParentType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InterceptorBean" /> class.
        /// </summary>
        /// <param name="Content">Content.</param>
        /// <param name="ExecutionPoint">ExecutionPoint.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IdTemp">IdTemp.</param>
        /// <param name="Operation">Operation.</param>
        /// <param name="Parent">Parent.</param>
        /// <param name="ParentType">ParentType.</param>
        /// <param name="PlanId">PlanId.</param>
        /// <param name="Position">Position.</param>
        /// <param name="Resource">Resource.</param>
        /// <param name="Revision">Revision.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Type">Type.</param>
        public InterceptorBean(string Content = default(string), ExecutionPointEnum? ExecutionPoint = default(ExecutionPointEnum?), long? Id = default(long?), long? IdTemp = default(long?), APIComponentSimpleBean Operation = default(APIComponentSimpleBean), InterceptorReferenceBean Parent = default(InterceptorReferenceBean), ParentTypeEnum? ParentType = default(ParentTypeEnum?), long? PlanId = default(long?), int? Position = default(int?), APIComponentSimpleBean Resource = default(APIComponentSimpleBean), APIComponentSimpleBean Revision = default(APIComponentSimpleBean), StatusEnum? Status = default(StatusEnum?), string Type = default(string))
        {
            this.Content = Content;
            this.ExecutionPoint = ExecutionPoint;
            this.Id = Id;
            this.IdTemp = IdTemp;
            this.Operation = Operation;
            this.Parent = Parent;
            this.ParentType = ParentType;
            this.PlanId = PlanId;
            this.Position = Position;
            this.Resource = Resource;
            this.Revision = Revision;
            this.Status = Status;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IdTemp
        /// </summary>
        [DataMember(Name="idTemp", EmitDefaultValue=false)]
        public long? IdTemp { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public APIComponentSimpleBean Operation { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public InterceptorReferenceBean Parent { get; set; }


        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        [DataMember(Name="planId", EmitDefaultValue=false)]
        public long? PlanId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public APIComponentSimpleBean Resource { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public APIComponentSimpleBean Revision { get; set; }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InterceptorBean {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ExecutionPoint: ").Append(ExecutionPoint).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdTemp: ").Append(IdTemp).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ParentType: ").Append(ParentType).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InterceptorBean);
        }

        /// <summary>
        /// Returns true if InterceptorBean instances are equal
        /// </summary>
        /// <param name="other">Instance of InterceptorBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterceptorBean other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.ExecutionPoint == other.ExecutionPoint ||
                    this.ExecutionPoint != null &&
                    this.ExecutionPoint.Equals(other.ExecutionPoint)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IdTemp == other.IdTemp ||
                    this.IdTemp != null &&
                    this.IdTemp.Equals(other.IdTemp)
                ) && 
                (
                    this.Operation == other.Operation ||
                    this.Operation != null &&
                    this.Operation.Equals(other.Operation)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.ParentType == other.ParentType ||
                    this.ParentType != null &&
                    this.ParentType.Equals(other.ParentType)
                ) && 
                (
                    this.PlanId == other.PlanId ||
                    this.PlanId != null &&
                    this.PlanId.Equals(other.PlanId)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Resource == other.Resource ||
                    this.Resource != null &&
                    this.Resource.Equals(other.Resource)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.ExecutionPoint != null)
                    hash = hash * 59 + this.ExecutionPoint.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IdTemp != null)
                    hash = hash * 59 + this.IdTemp.GetHashCode();
                if (this.Operation != null)
                    hash = hash * 59 + this.Operation.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.ParentType != null)
                    hash = hash * 59 + this.ParentType.GetHashCode();
                if (this.PlanId != null)
                    hash = hash * 59 + this.PlanId.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.Resource != null)
                    hash = hash * 59 + this.Resource.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
