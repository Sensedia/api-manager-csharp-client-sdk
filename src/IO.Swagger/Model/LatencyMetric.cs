/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LatencyMetric
    /// </summary>
    [DataContract]
    public partial class LatencyMetric :  IEquatable<LatencyMetric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LatencyMetric" /> class.
        /// </summary>
        /// <param name="Count">Count.</param>
        /// <param name="Date">Date.</param>
        /// <param name="LatencyMillis">LatencyMillis.</param>
        /// <param name="TotalLatency">TotalLatency.</param>
        public LatencyMetric(long? Count = default(long?), DateTime? Date = default(DateTime?), long? LatencyMillis = default(long?), long? TotalLatency = default(long?))
        {
            this.Count = Count;
            this.Date = Date;
            this.LatencyMillis = LatencyMillis;
            this.TotalLatency = TotalLatency;
        }
        
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets LatencyMillis
        /// </summary>
        [DataMember(Name="latencyMillis", EmitDefaultValue=false)]
        public long? LatencyMillis { get; set; }

        /// <summary>
        /// Gets or Sets TotalLatency
        /// </summary>
        [DataMember(Name="totalLatency", EmitDefaultValue=false)]
        public long? TotalLatency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LatencyMetric {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  LatencyMillis: ").Append(LatencyMillis).Append("\n");
            sb.Append("  TotalLatency: ").Append(TotalLatency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LatencyMetric);
        }

        /// <summary>
        /// Returns true if LatencyMetric instances are equal
        /// </summary>
        /// <param name="other">Instance of LatencyMetric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LatencyMetric other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.LatencyMillis == other.LatencyMillis ||
                    this.LatencyMillis != null &&
                    this.LatencyMillis.Equals(other.LatencyMillis)
                ) && 
                (
                    this.TotalLatency == other.TotalLatency ||
                    this.TotalLatency != null &&
                    this.TotalLatency.Equals(other.TotalLatency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.LatencyMillis != null)
                    hash = hash * 59 + this.LatencyMillis.GetHashCode();
                if (this.TotalLatency != null)
                    hash = hash * 59 + this.TotalLatency.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
