/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Access token model
    /// </summary>
    [DataContract]
    public partial class AccessToken :  IEquatable<AccessToken>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum REVOKED for "REVOKED"
            /// </summary>
            [EnumMember(Value = "REVOKED")]
            REVOKED,
            
            /// <summary>
            /// Enum EXPIRED for "EXPIRED"
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessToken" /> class.
        /// </summary>
        /// <param name="Apis">Apis.</param>
        /// <param name="App">App.</param>
        /// <param name="Code">Code.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="ExpiredDate">ExpiredDate.</param>
        /// <param name="ExpiresIn">ExpiresIn.</param>
        /// <param name="ExtraInfo">ExtraInfo.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Owner">Owner.</param>
        /// <param name="PlanIds">PlanIds.</param>
        /// <param name="RefreshToken">RefreshToken.</param>
        /// <param name="Scope">Scope.</param>
        /// <param name="Status">Status.</param>
        public AccessToken(List<APISimpleBean> Apis = default(List<APISimpleBean>), AppTokenSimpleBean App = default(AppTokenSimpleBean), string Code = default(string), DateTime? CreationDate = default(DateTime?), DateTime? ExpiredDate = default(DateTime?), long? ExpiresIn = default(long?), Object ExtraInfo = default(Object), long? Id = default(long?), string Owner = default(string), List<long?> PlanIds = default(List<long?>), string RefreshToken = default(string), string Scope = default(string), StatusEnum? Status = default(StatusEnum?))
        {
            this.Apis = Apis;
            this.App = App;
            this.Code = Code;
            this.CreationDate = CreationDate;
            this.ExpiredDate = ExpiredDate;
            this.ExpiresIn = ExpiresIn;
            this.ExtraInfo = ExtraInfo;
            this.Id = Id;
            this.Owner = Owner;
            this.PlanIds = PlanIds;
            this.RefreshToken = RefreshToken;
            this.Scope = Scope;
            this.Status = Status;
        }
        
        /// <summary>
        /// Gets or Sets Apis
        /// </summary>
        [DataMember(Name="apis", EmitDefaultValue=false)]
        public List<APISimpleBean> Apis { get; set; }

        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public AppTokenSimpleBean App { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpiredDate
        /// </summary>
        [DataMember(Name="expiredDate", EmitDefaultValue=false)]
        public DateTime? ExpiredDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresIn
        /// </summary>
        [DataMember(Name="expiresIn", EmitDefaultValue=false)]
        public long? ExpiresIn { get; set; }

        /// <summary>
        /// Gets or Sets ExtraInfo
        /// </summary>
        [DataMember(Name="extraInfo", EmitDefaultValue=false)]
        public Object ExtraInfo { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets PlanIds
        /// </summary>
        [DataMember(Name="planIds", EmitDefaultValue=false)]
        public List<long?> PlanIds { get; set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name="refreshToken", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessToken {\n");
            sb.Append("  Apis: ").Append(Apis).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ExpiredDate: ").Append(ExpiredDate).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  ExtraInfo: ").Append(ExtraInfo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PlanIds: ").Append(PlanIds).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccessToken);
        }

        /// <summary>
        /// Returns true if AccessToken instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessToken other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Apis == other.Apis ||
                    this.Apis != null &&
                    this.Apis.SequenceEqual(other.Apis)
                ) && 
                (
                    this.App == other.App ||
                    this.App != null &&
                    this.App.Equals(other.App)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.ExpiredDate == other.ExpiredDate ||
                    this.ExpiredDate != null &&
                    this.ExpiredDate.Equals(other.ExpiredDate)
                ) && 
                (
                    this.ExpiresIn == other.ExpiresIn ||
                    this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(other.ExpiresIn)
                ) && 
                (
                    this.ExtraInfo == other.ExtraInfo ||
                    this.ExtraInfo != null &&
                    this.ExtraInfo.Equals(other.ExtraInfo)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                ) && 
                (
                    this.PlanIds == other.PlanIds ||
                    this.PlanIds != null &&
                    this.PlanIds.SequenceEqual(other.PlanIds)
                ) && 
                (
                    this.RefreshToken == other.RefreshToken ||
                    this.RefreshToken != null &&
                    this.RefreshToken.Equals(other.RefreshToken)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Apis != null)
                    hash = hash * 59 + this.Apis.GetHashCode();
                if (this.App != null)
                    hash = hash * 59 + this.App.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.ExpiredDate != null)
                    hash = hash * 59 + this.ExpiredDate.GetHashCode();
                if (this.ExpiresIn != null)
                    hash = hash * 59 + this.ExpiresIn.GetHashCode();
                if (this.ExtraInfo != null)
                    hash = hash * 59 + this.ExtraInfo.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                if (this.PlanIds != null)
                    hash = hash * 59 + this.PlanIds.GetHashCode();
                if (this.RefreshToken != null)
                    hash = hash * 59 + this.RefreshToken.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
