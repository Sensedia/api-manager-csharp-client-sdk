/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Response create or update plan
    /// </summary>
    [DataContract]
    public partial class PlanResponse :  IEquatable<PlanResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanResponse" /> class.
        /// </summary>
        /// <param name="Api">Api.</param>
        /// <param name="DefaultPlan">DefaultPlan.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Interceptors">Interceptors.</param>
        /// <param name="Name">Name.</param>
        public PlanResponse(APISimpleBean Api = default(APISimpleBean), bool? DefaultPlan = default(bool?), string Description = default(string), long? Id = default(long?), List<InterceptorBean> Interceptors = default(List<InterceptorBean>), string Name = default(string))
        {
            this.Api = Api;
            this.DefaultPlan = DefaultPlan;
            this.Description = Description;
            this.Id = Id;
            this.Interceptors = Interceptors;
            this.Name = Name;
        }
        
        /// <summary>
        /// Gets or Sets Api
        /// </summary>
        [DataMember(Name="api", EmitDefaultValue=false)]
        public APISimpleBean Api { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPlan
        /// </summary>
        [DataMember(Name="defaultPlan", EmitDefaultValue=false)]
        public bool? DefaultPlan { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Interceptors
        /// </summary>
        [DataMember(Name="interceptors", EmitDefaultValue=false)]
        public List<InterceptorBean> Interceptors { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanResponse {\n");
            sb.Append("  Api: ").Append(Api).Append("\n");
            sb.Append("  DefaultPlan: ").Append(DefaultPlan).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Interceptors: ").Append(Interceptors).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlanResponse);
        }

        /// <summary>
        /// Returns true if PlanResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PlanResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Api == other.Api ||
                    this.Api != null &&
                    this.Api.Equals(other.Api)
                ) && 
                (
                    this.DefaultPlan == other.DefaultPlan ||
                    this.DefaultPlan != null &&
                    this.DefaultPlan.Equals(other.DefaultPlan)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Interceptors == other.Interceptors ||
                    this.Interceptors != null &&
                    this.Interceptors.SequenceEqual(other.Interceptors)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Api != null)
                    hash = hash * 59 + this.Api.GetHashCode();
                if (this.DefaultPlan != null)
                    hash = hash * 59 + this.DefaultPlan.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Interceptors != null)
                    hash = hash * 59 + this.Interceptors.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
