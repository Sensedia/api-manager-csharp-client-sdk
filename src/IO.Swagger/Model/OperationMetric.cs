/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OperationMetric
    /// </summary>
    [DataContract]
    public partial class OperationMetric :  IEquatable<OperationMetric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationMetric" /> class.
        /// </summary>
        /// <param name="AvgLatency">AvgLatency.</param>
        /// <param name="CacheCount">CacheCount.</param>
        /// <param name="Count">Count.</param>
        /// <param name="Date">Date.</param>
        /// <param name="HitsWithCache">HitsWithCache.</param>
        /// <param name="HitsWithoutCache">HitsWithoutCache.</param>
        public OperationMetric(double? AvgLatency = default(double?), long? CacheCount = default(long?), long? Count = default(long?), DateTime? Date = default(DateTime?), long? HitsWithCache = default(long?), long? HitsWithoutCache = default(long?))
        {
            this.AvgLatency = AvgLatency;
            this.CacheCount = CacheCount;
            this.Count = Count;
            this.Date = Date;
            this.HitsWithCache = HitsWithCache;
            this.HitsWithoutCache = HitsWithoutCache;
        }
        
        /// <summary>
        /// Gets or Sets AvgLatency
        /// </summary>
        [DataMember(Name="avgLatency", EmitDefaultValue=false)]
        public double? AvgLatency { get; set; }

        /// <summary>
        /// Gets or Sets CacheCount
        /// </summary>
        [DataMember(Name="cacheCount", EmitDefaultValue=false)]
        public long? CacheCount { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets HitsWithCache
        /// </summary>
        [DataMember(Name="hitsWithCache", EmitDefaultValue=false)]
        public long? HitsWithCache { get; set; }

        /// <summary>
        /// Gets or Sets HitsWithoutCache
        /// </summary>
        [DataMember(Name="hitsWithoutCache", EmitDefaultValue=false)]
        public long? HitsWithoutCache { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationMetric {\n");
            sb.Append("  AvgLatency: ").Append(AvgLatency).Append("\n");
            sb.Append("  CacheCount: ").Append(CacheCount).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  HitsWithCache: ").Append(HitsWithCache).Append("\n");
            sb.Append("  HitsWithoutCache: ").Append(HitsWithoutCache).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OperationMetric);
        }

        /// <summary>
        /// Returns true if OperationMetric instances are equal
        /// </summary>
        /// <param name="other">Instance of OperationMetric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationMetric other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AvgLatency == other.AvgLatency ||
                    this.AvgLatency != null &&
                    this.AvgLatency.Equals(other.AvgLatency)
                ) && 
                (
                    this.CacheCount == other.CacheCount ||
                    this.CacheCount != null &&
                    this.CacheCount.Equals(other.CacheCount)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.HitsWithCache == other.HitsWithCache ||
                    this.HitsWithCache != null &&
                    this.HitsWithCache.Equals(other.HitsWithCache)
                ) && 
                (
                    this.HitsWithoutCache == other.HitsWithoutCache ||
                    this.HitsWithoutCache != null &&
                    this.HitsWithoutCache.Equals(other.HitsWithoutCache)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AvgLatency != null)
                    hash = hash * 59 + this.AvgLatency.GetHashCode();
                if (this.CacheCount != null)
                    hash = hash * 59 + this.CacheCount.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.HitsWithCache != null)
                    hash = hash * 59 + this.HitsWithCache.GetHashCode();
                if (this.HitsWithoutCache != null)
                    hash = hash * 59 + this.HitsWithoutCache.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
