/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OperationBean
    /// </summary>
    [DataContract]
    public partial class OperationBean :  IEquatable<OperationBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationBean" /> class.
        /// </summary>
        /// <param name="ApiBroken">ApiBroken.</param>
        /// <param name="Async">Async.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Destination">Destination.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Interceptors">Interceptors.</param>
        /// <param name="Method">Method.</param>
        /// <param name="Path">Path.</param>
        /// <param name="Timeout">Timeout.</param>
        /// <param name="Urls">Urls.</param>
        public OperationBean(bool? ApiBroken = default(bool?), bool? Async = default(bool?), string Description = default(string), string Destination = default(string), long? Id = default(long?), List<InterceptorBean> Interceptors = default(List<InterceptorBean>), string Method = default(string), string Path = default(string), string Timeout = default(string), List<OperationUrlBean> Urls = default(List<OperationUrlBean>))
        {
            this.ApiBroken = ApiBroken;
            this.Async = Async;
            this.Description = Description;
            this.Destination = Destination;
            this.Id = Id;
            this.Interceptors = Interceptors;
            this.Method = Method;
            this.Path = Path;
            this.Timeout = Timeout;
            this.Urls = Urls;
        }
        
        /// <summary>
        /// Gets or Sets ApiBroken
        /// </summary>
        [DataMember(Name="apiBroken", EmitDefaultValue=false)]
        public bool? ApiBroken { get; set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [DataMember(Name="async", EmitDefaultValue=false)]
        public bool? Async { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Interceptors
        /// </summary>
        [DataMember(Name="interceptors", EmitDefaultValue=false)]
        public List<InterceptorBean> Interceptors { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public List<OperationUrlBean> Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperationBean {\n");
            sb.Append("  ApiBroken: ").Append(ApiBroken).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Interceptors: ").Append(Interceptors).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OperationBean);
        }

        /// <summary>
        /// Returns true if OperationBean instances are equal
        /// </summary>
        /// <param name="other">Instance of OperationBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperationBean other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiBroken == other.ApiBroken ||
                    this.ApiBroken != null &&
                    this.ApiBroken.Equals(other.ApiBroken)
                ) && 
                (
                    this.Async == other.Async ||
                    this.Async != null &&
                    this.Async.Equals(other.Async)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Destination == other.Destination ||
                    this.Destination != null &&
                    this.Destination.Equals(other.Destination)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Interceptors == other.Interceptors ||
                    this.Interceptors != null &&
                    this.Interceptors.SequenceEqual(other.Interceptors)
                ) && 
                (
                    this.Method == other.Method ||
                    this.Method != null &&
                    this.Method.Equals(other.Method)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.Timeout == other.Timeout ||
                    this.Timeout != null &&
                    this.Timeout.Equals(other.Timeout)
                ) && 
                (
                    this.Urls == other.Urls ||
                    this.Urls != null &&
                    this.Urls.SequenceEqual(other.Urls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiBroken != null)
                    hash = hash * 59 + this.ApiBroken.GetHashCode();
                if (this.Async != null)
                    hash = hash * 59 + this.Async.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Destination != null)
                    hash = hash * 59 + this.Destination.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Interceptors != null)
                    hash = hash * 59 + this.Interceptors.GetHashCode();
                if (this.Method != null)
                    hash = hash * 59 + this.Method.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.Timeout != null)
                    hash = hash * 59 + this.Timeout.GetHashCode();
                if (this.Urls != null)
                    hash = hash * 59 + this.Urls.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
