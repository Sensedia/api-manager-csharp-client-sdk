/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserBean
    /// </summary>
    [DataContract]
    public partial class UserBean :  IEquatable<UserBean>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserTypeEnum
        {
            
            /// <summary>
            /// Enum DATABASE for "DATABASE"
            /// </summary>
            [EnumMember(Value = "DATABASE")]
            DATABASE,
            
            /// <summary>
            /// Enum LDAP for "LDAP"
            /// </summary>
            [EnumMember(Value = "LDAP")]
            LDAP
        }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public UserTypeEnum? UserType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserBean" /> class.
        /// </summary>
        /// <param name="Email">Email.</param>
        /// <param name="HasAllPermissions">HasAllPermissions.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Image">Image.</param>
        /// <param name="Login">Login.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Password">Password.</param>
        /// <param name="PasswordConfirm">PasswordConfirm.</param>
        /// <param name="Roles">Roles.</param>
        /// <param name="TeamUserId">TeamUserId.</param>
        /// <param name="Teams">Teams.</param>
        /// <param name="UserType">UserType.</param>
        public UserBean(string Email = default(string), bool? HasAllPermissions = default(bool?), long? Id = default(long?), string Image = default(string), string Login = default(string), string Name = default(string), string Password = default(string), string PasswordConfirm = default(string), List<RoleBean> Roles = default(List<RoleBean>), long? TeamUserId = default(long?), List<TeamBean> Teams = default(List<TeamBean>), UserTypeEnum? UserType = default(UserTypeEnum?))
        {
            this.Email = Email;
            this.HasAllPermissions = HasAllPermissions;
            this.Id = Id;
            this.Image = Image;
            this.Login = Login;
            this.Name = Name;
            this.Password = Password;
            this.PasswordConfirm = PasswordConfirm;
            this.Roles = Roles;
            this.TeamUserId = TeamUserId;
            this.Teams = Teams;
            this.UserType = UserType;
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets HasAllPermissions
        /// </summary>
        [DataMember(Name="hasAllPermissions", EmitDefaultValue=false)]
        public bool? HasAllPermissions { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public string Login { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets PasswordConfirm
        /// </summary>
        [DataMember(Name="passwordConfirm", EmitDefaultValue=false)]
        public string PasswordConfirm { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<RoleBean> Roles { get; set; }

        /// <summary>
        /// Gets or Sets TeamUserId
        /// </summary>
        [DataMember(Name="teamUserId", EmitDefaultValue=false)]
        public long? TeamUserId { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<TeamBean> Teams { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserBean {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  HasAllPermissions: ").Append(HasAllPermissions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordConfirm: ").Append(PasswordConfirm).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  TeamUserId: ").Append(TeamUserId).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserBean);
        }

        /// <summary>
        /// Returns true if UserBean instances are equal
        /// </summary>
        /// <param name="other">Instance of UserBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserBean other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.HasAllPermissions == other.HasAllPermissions ||
                    this.HasAllPermissions != null &&
                    this.HasAllPermissions.Equals(other.HasAllPermissions)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                ) && 
                (
                    this.Login == other.Login ||
                    this.Login != null &&
                    this.Login.Equals(other.Login)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.PasswordConfirm == other.PasswordConfirm ||
                    this.PasswordConfirm != null &&
                    this.PasswordConfirm.Equals(other.PasswordConfirm)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.TeamUserId == other.TeamUserId ||
                    this.TeamUserId != null &&
                    this.TeamUserId.Equals(other.TeamUserId)
                ) && 
                (
                    this.Teams == other.Teams ||
                    this.Teams != null &&
                    this.Teams.SequenceEqual(other.Teams)
                ) && 
                (
                    this.UserType == other.UserType ||
                    this.UserType != null &&
                    this.UserType.Equals(other.UserType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.HasAllPermissions != null)
                    hash = hash * 59 + this.HasAllPermissions.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                if (this.Login != null)
                    hash = hash * 59 + this.Login.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.PasswordConfirm != null)
                    hash = hash * 59 + this.PasswordConfirm.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.TeamUserId != null)
                    hash = hash * 59 + this.TeamUserId.GetHashCode();
                if (this.Teams != null)
                    hash = hash * 59 + this.Teams.GetHashCode();
                if (this.UserType != null)
                    hash = hash * 59 + this.UserType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
