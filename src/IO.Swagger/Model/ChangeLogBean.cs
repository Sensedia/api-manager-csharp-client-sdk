/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChangeLogBean
    /// </summary>
    [DataContract]
    public partial class ChangeLogBean :  IEquatable<ChangeLogBean>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum CREATED for "CREATED"
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED,
            
            /// <summary>
            /// Enum UPDATED for "UPDATED"
            /// </summary>
            [EnumMember(Value = "UPDATED")]
            UPDATED,
            
            /// <summary>
            /// Enum DELETED for "DELETED"
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED
        }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectTypeEnum
        {
            
            /// <summary>
            /// Enum APPTOKEN for "APP_TOKEN"
            /// </summary>
            [EnumMember(Value = "APP_TOKEN")]
            APPTOKEN,
            
            /// <summary>
            /// Enum AUTHTOKEN for "AUTH_TOKEN"
            /// </summary>
            [EnumMember(Value = "AUTH_TOKEN")]
            AUTHTOKEN,
            
            /// <summary>
            /// Enum APIDEFINITION for "API_DEFINITION"
            /// </summary>
            [EnumMember(Value = "API_DEFINITION")]
            APIDEFINITION,
            
            /// <summary>
            /// Enum USERACCOUNT for "USER_ACCOUNT"
            /// </summary>
            [EnumMember(Value = "USER_ACCOUNT")]
            USERACCOUNT,
            
            /// <summary>
            /// Enum ACCESSCREDENTIAL for "ACCESS_CREDENTIAL"
            /// </summary>
            [EnumMember(Value = "ACCESS_CREDENTIAL")]
            ACCESSCREDENTIAL,
            
            /// <summary>
            /// Enum EXTERNALLISTENER for "EXTERNAL_LISTENER"
            /// </summary>
            [EnumMember(Value = "EXTERNAL_LISTENER")]
            EXTERNALLISTENER,
            
            /// <summary>
            /// Enum APICOMPONENTINTERCEPTOR for "APICOMPONENTINTERCEPTOR"
            /// </summary>
            [EnumMember(Value = "APICOMPONENTINTERCEPTOR")]
            APICOMPONENTINTERCEPTOR,
            
            /// <summary>
            /// Enum PLANINTERCEPTOR for "PLANINTERCEPTOR"
            /// </summary>
            [EnumMember(Value = "PLANINTERCEPTOR")]
            PLANINTERCEPTOR,
            
            /// <summary>
            /// Enum PLAN for "PLAN"
            /// </summary>
            [EnumMember(Value = "PLAN")]
            PLAN,
            
            /// <summary>
            /// Enum CUSTOMINTERCEPTOR for "CUSTOM_INTERCEPTOR"
            /// </summary>
            [EnumMember(Value = "CUSTOM_INTERCEPTOR")]
            CUSTOMINTERCEPTOR,
            
            /// <summary>
            /// Enum CUSTOMJAVAINTERCEPTOR for "CUSTOM_JAVA_INTERCEPTOR"
            /// </summary>
            [EnumMember(Value = "CUSTOM_JAVA_INTERCEPTOR")]
            CUSTOMJAVAINTERCEPTOR,
            
            /// <summary>
            /// Enum BAAS for "BAAS"
            /// </summary>
            [EnumMember(Value = "BAAS")]
            BAAS,
            
            /// <summary>
            /// Enum ENVIRONMENT for "ENVIRONMENT"
            /// </summary>
            [EnumMember(Value = "ENVIRONMENT")]
            ENVIRONMENT,
            
            /// <summary>
            /// Enum REVISION for "REVISION"
            /// </summary>
            [EnumMember(Value = "REVISION")]
            REVISION,
            
            /// <summary>
            /// Enum TEAM for "TEAM"
            /// </summary>
            [EnumMember(Value = "TEAM")]
            TEAM,
            
            /// <summary>
            /// Enum DEPLOYMENT for "DEPLOYMENT"
            /// </summary>
            [EnumMember(Value = "DEPLOYMENT")]
            DEPLOYMENT,
            
            /// <summary>
            /// Enum GATEWAY for "GATEWAY"
            /// </summary>
            [EnumMember(Value = "GATEWAY")]
            GATEWAY
        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name="objectType", EmitDefaultValue=false)]
        public ObjectTypeEnum? ObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeLogBean" /> class.
        /// </summary>
        /// <param name="Action">Action.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="CredentialId">CredentialId.</param>
        /// <param name="CredentialLogin">CredentialLogin.</param>
        /// <param name="CredentialName">CredentialName.</param>
        /// <param name="Id">Id.</param>
        /// <param name="JsonAfter">JsonAfter.</param>
        /// <param name="JsonBefore">JsonBefore.</param>
        /// <param name="ObjectId">ObjectId.</param>
        /// <param name="ObjectType">ObjectType.</param>
        /// <param name="Parent">Parent.</param>
        public ChangeLogBean(ActionEnum? Action = default(ActionEnum?), DateTime? CreationDate = default(DateTime?), long? CredentialId = default(long?), string CredentialLogin = default(string), string CredentialName = default(string), long? Id = default(long?), string JsonAfter = default(string), string JsonBefore = default(string), long? ObjectId = default(long?), ObjectTypeEnum? ObjectType = default(ObjectTypeEnum?), ChangeLogBean Parent = default(ChangeLogBean))
        {
            this.Action = Action;
            this.CreationDate = CreationDate;
            this.CredentialId = CredentialId;
            this.CredentialLogin = CredentialLogin;
            this.CredentialName = CredentialName;
            this.Id = Id;
            this.JsonAfter = JsonAfter;
            this.JsonBefore = JsonBefore;
            this.ObjectId = ObjectId;
            this.ObjectType = ObjectType;
            this.Parent = Parent;
        }
        

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets CredentialId
        /// </summary>
        [DataMember(Name="credentialId", EmitDefaultValue=false)]
        public long? CredentialId { get; set; }

        /// <summary>
        /// Gets or Sets CredentialLogin
        /// </summary>
        [DataMember(Name="credentialLogin", EmitDefaultValue=false)]
        public string CredentialLogin { get; set; }

        /// <summary>
        /// Gets or Sets CredentialName
        /// </summary>
        [DataMember(Name="credentialName", EmitDefaultValue=false)]
        public string CredentialName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets JsonAfter
        /// </summary>
        [DataMember(Name="jsonAfter", EmitDefaultValue=false)]
        public string JsonAfter { get; set; }

        /// <summary>
        /// Gets or Sets JsonBefore
        /// </summary>
        [DataMember(Name="jsonBefore", EmitDefaultValue=false)]
        public string JsonBefore { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public long? ObjectId { get; set; }


        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public ChangeLogBean Parent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeLogBean {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CredentialId: ").Append(CredentialId).Append("\n");
            sb.Append("  CredentialLogin: ").Append(CredentialLogin).Append("\n");
            sb.Append("  CredentialName: ").Append(CredentialName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JsonAfter: ").Append(JsonAfter).Append("\n");
            sb.Append("  JsonBefore: ").Append(JsonBefore).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChangeLogBean);
        }

        /// <summary>
        /// Returns true if ChangeLogBean instances are equal
        /// </summary>
        /// <param name="other">Instance of ChangeLogBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeLogBean other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.CredentialId == other.CredentialId ||
                    this.CredentialId != null &&
                    this.CredentialId.Equals(other.CredentialId)
                ) && 
                (
                    this.CredentialLogin == other.CredentialLogin ||
                    this.CredentialLogin != null &&
                    this.CredentialLogin.Equals(other.CredentialLogin)
                ) && 
                (
                    this.CredentialName == other.CredentialName ||
                    this.CredentialName != null &&
                    this.CredentialName.Equals(other.CredentialName)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.JsonAfter == other.JsonAfter ||
                    this.JsonAfter != null &&
                    this.JsonAfter.Equals(other.JsonAfter)
                ) && 
                (
                    this.JsonBefore == other.JsonBefore ||
                    this.JsonBefore != null &&
                    this.JsonBefore.Equals(other.JsonBefore)
                ) && 
                (
                    this.ObjectId == other.ObjectId ||
                    this.ObjectId != null &&
                    this.ObjectId.Equals(other.ObjectId)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.CredentialId != null)
                    hash = hash * 59 + this.CredentialId.GetHashCode();
                if (this.CredentialLogin != null)
                    hash = hash * 59 + this.CredentialLogin.GetHashCode();
                if (this.CredentialName != null)
                    hash = hash * 59 + this.CredentialName.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.JsonAfter != null)
                    hash = hash * 59 + this.JsonAfter.GetHashCode();
                if (this.JsonBefore != null)
                    hash = hash * 59 + this.JsonBefore.GetHashCode();
                if (this.ObjectId != null)
                    hash = hash * 59 + this.ObjectId.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
