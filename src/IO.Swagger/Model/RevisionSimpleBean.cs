/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RevisionSimpleBean
    /// </summary>
    [DataContract]
    public partial class RevisionSimpleBean :  IEquatable<RevisionSimpleBean>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LifeCycleEnum
        {
            
            /// <summary>
            /// Enum DRAFT for "DRAFT"
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT,
            
            /// <summary>
            /// Enum AVAILABLE for "AVAILABLE"
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE,
            
            /// <summary>
            /// Enum RETIRED for "RETIRED"
            /// </summary>
            [EnumMember(Value = "RETIRED")]
            RETIRED
        }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name="lifeCycle", EmitDefaultValue=false)]
        public LifeCycleEnum? LifeCycle { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RevisionSimpleBean" /> class.
        /// </summary>
        /// <param name="ApiBroken">ApiBroken.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="Deployments">Deployments.</param>
        /// <param name="Destination">Destination.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Interceptors">Interceptors.</param>
        /// <param name="LifeCycle">LifeCycle.</param>
        /// <param name="Resources">Resources.</param>
        /// <param name="RevisionNumber">RevisionNumber.</param>
        /// <param name="Timeout">Timeout.</param>
        public RevisionSimpleBean(bool? ApiBroken = default(bool?), DateTime? CreationDate = default(DateTime?), List<DeploymentBean> Deployments = default(List<DeploymentBean>), string Destination = default(string), long? Id = default(long?), List<InterceptorBean> Interceptors = default(List<InterceptorBean>), LifeCycleEnum? LifeCycle = default(LifeCycleEnum?), List<ResourceBean> Resources = default(List<ResourceBean>), int? RevisionNumber = default(int?), string Timeout = default(string))
        {
            this.ApiBroken = ApiBroken;
            this.CreationDate = CreationDate;
            this.Deployments = Deployments;
            this.Destination = Destination;
            this.Id = Id;
            this.Interceptors = Interceptors;
            this.LifeCycle = LifeCycle;
            this.Resources = Resources;
            this.RevisionNumber = RevisionNumber;
            this.Timeout = Timeout;
        }
        
        /// <summary>
        /// Gets or Sets ApiBroken
        /// </summary>
        [DataMember(Name="apiBroken", EmitDefaultValue=false)]
        public bool? ApiBroken { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Deployments
        /// </summary>
        [DataMember(Name="deployments", EmitDefaultValue=false)]
        public List<DeploymentBean> Deployments { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Interceptors
        /// </summary>
        [DataMember(Name="interceptors", EmitDefaultValue=false)]
        public List<InterceptorBean> Interceptors { get; set; }


        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<ResourceBean> Resources { get; set; }

        /// <summary>
        /// Gets or Sets RevisionNumber
        /// </summary>
        [DataMember(Name="revisionNumber", EmitDefaultValue=false)]
        public int? RevisionNumber { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RevisionSimpleBean {\n");
            sb.Append("  ApiBroken: ").Append(ApiBroken).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Deployments: ").Append(Deployments).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Interceptors: ").Append(Interceptors).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  RevisionNumber: ").Append(RevisionNumber).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RevisionSimpleBean);
        }

        /// <summary>
        /// Returns true if RevisionSimpleBean instances are equal
        /// </summary>
        /// <param name="other">Instance of RevisionSimpleBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RevisionSimpleBean other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiBroken == other.ApiBroken ||
                    this.ApiBroken != null &&
                    this.ApiBroken.Equals(other.ApiBroken)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.Deployments == other.Deployments ||
                    this.Deployments != null &&
                    this.Deployments.SequenceEqual(other.Deployments)
                ) && 
                (
                    this.Destination == other.Destination ||
                    this.Destination != null &&
                    this.Destination.Equals(other.Destination)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Interceptors == other.Interceptors ||
                    this.Interceptors != null &&
                    this.Interceptors.SequenceEqual(other.Interceptors)
                ) && 
                (
                    this.LifeCycle == other.LifeCycle ||
                    this.LifeCycle != null &&
                    this.LifeCycle.Equals(other.LifeCycle)
                ) && 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(other.Resources)
                ) && 
                (
                    this.RevisionNumber == other.RevisionNumber ||
                    this.RevisionNumber != null &&
                    this.RevisionNumber.Equals(other.RevisionNumber)
                ) && 
                (
                    this.Timeout == other.Timeout ||
                    this.Timeout != null &&
                    this.Timeout.Equals(other.Timeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiBroken != null)
                    hash = hash * 59 + this.ApiBroken.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.Deployments != null)
                    hash = hash * 59 + this.Deployments.GetHashCode();
                if (this.Destination != null)
                    hash = hash * 59 + this.Destination.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Interceptors != null)
                    hash = hash * 59 + this.Interceptors.GetHashCode();
                if (this.LifeCycle != null)
                    hash = hash * 59 + this.LifeCycle.GetHashCode();
                if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                if (this.RevisionNumber != null)
                    hash = hash * 59 + this.RevisionNumber.GetHashCode();
                if (this.Timeout != null)
                    hash = hash * 59 + this.Timeout.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
