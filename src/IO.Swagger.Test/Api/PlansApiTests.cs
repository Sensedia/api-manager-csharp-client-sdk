/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PlansApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PlansApiTests
    {
        private PlansApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PlansApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PlansApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PlansApi
            //Assert.IsInstanceOfType(typeof(PlansApi), instance, "instance is a PlansApi");
        }

        
        /// <summary>
        /// Test ClonePlanUsingPOST1
        /// </summary>
        [Test]
        public void ClonePlanUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //var response = instance.ClonePlanUsingPOST1(id, sensediaAuth);
            //Assert.IsInstanceOf<PlanResponse> (response, "response is PlanResponse");
        }
        
        /// <summary>
        /// Test CountUsingGET13
        /// </summary>
        [Test]
        public void CountUsingGET13Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //var response = instance.CountUsingGET13(sensediaAuth);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test DeletePlanUsingDELETE1
        /// </summary>
        [Test]
        public void DeletePlanUsingDELETE1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //var response = instance.DeletePlanUsingDELETE1(id, sensediaAuth);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test GetPlanChangeLogUsingGET3
        /// </summary>
        [Test]
        public void GetPlanChangeLogUsingGET3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string sensediaAuth = null;
            //var response = instance.GetPlanChangeLogUsingGET3(id, sensediaAuth);
            //Assert.IsInstanceOf<List<ChangeLogBean>> (response, "response is List<ChangeLogBean>");
        }
        
        /// <summary>
        /// Test GetPlanDefaultByApiUsingGET1
        /// </summary>
        [Test]
        public void GetPlanDefaultByApiUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //var response = instance.GetPlanDefaultByApiUsingGET1(id, sensediaAuth);
            //Assert.IsInstanceOf<PlanResponse> (response, "response is PlanResponse");
        }
        
        /// <summary>
        /// Test GetPlanUsingGET2
        /// </summary>
        [Test]
        public void GetPlanUsingGET2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //var response = instance.GetPlanUsingGET2(id, sensediaAuth);
            //Assert.IsInstanceOf<PlanResponse> (response, "response is PlanResponse");
        }
        
        /// <summary>
        /// Test GetPlanUsingGET3
        /// </summary>
        [Test]
        public void GetPlanUsingGET3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //var response = instance.GetPlanUsingGET3(sensediaAuth);
            //Assert.IsInstanceOf<List<PlanResponse>> (response, "response is List<PlanResponse>");
        }
        
        /// <summary>
        /// Test PostPlanUsingPOST1
        /// </summary>
        [Test]
        public void PostPlanUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PlanResponse planBean = null;
            //string sensediaAuth = null;
            //var response = instance.PostPlanUsingPOST1(planBean, sensediaAuth);
            //Assert.IsInstanceOf<PlanResponse> (response, "response is PlanResponse");
        }
        
        /// <summary>
        /// Test PutPlanUsingPUT1
        /// </summary>
        [Test]
        public void PutPlanUsingPUT1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //PlanResponse planBean = null;
            //var response = instance.PutPlanUsingPUT1(id, sensediaAuth, planBean);
            //Assert.IsInstanceOf<PlanResponse> (response, "response is PlanResponse");
        }
        
        /// <summary>
        /// Test ValidatePartialPlanUsingPOST1
        /// </summary>
        [Test]
        public void ValidatePartialPlanUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //PlanResponse planBean = null;
            //var response = instance.ValidatePartialPlanUsingPOST1(sensediaAuth, planBean);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
    }

}
