/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing APIsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class APIsApiTests
    {
        private APIsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new APIsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of APIsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' APIsApi
            //Assert.IsInstanceOfType(typeof(APIsApi), instance, "instance is a APIsApi");
        }

        
        /// <summary>
        /// Test CloneApiUsingPOST1
        /// </summary>
        [Test]
        public void CloneApiUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //API apiBean = null;
            //var response = instance.CloneApiUsingPOST1(id, sensediaAuth, apiBean);
            //Assert.IsInstanceOf<APIResponse> (response, "response is APIResponse");
        }
        
        /// <summary>
        /// Test CreateAPIUsingPOST1
        /// </summary>
        [Test]
        public void CreateAPIUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //APICreateBean bean = null;
            //var response = instance.CreateAPIUsingPOST1(sensediaAuth, bean);
            //Assert.IsInstanceOf<APIResponse> (response, "response is APIResponse");
        }
        
        /// <summary>
        /// Test DeleteAPIUsingDELETE1
        /// </summary>
        [Test]
        public void DeleteAPIUsingDELETE1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //var response = instance.DeleteAPIUsingDELETE1(id, sensediaAuth);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test FindLastRevisionUsingGET1
        /// </summary>
        [Test]
        public void FindLastRevisionUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string sensediaAuth = null;
            //var response = instance.FindLastRevisionUsingGET1(id, sensediaAuth);
            //Assert.IsInstanceOf<RevisionBean> (response, "response is RevisionBean");
        }
        
        /// <summary>
        /// Test FindVersionsByAPIUsingGET1
        /// </summary>
        [Test]
        public void FindVersionsByAPIUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //var response = instance.FindVersionsByAPIUsingGET1(id, sensediaAuth);
            //Assert.IsInstanceOf<List<API>> (response, "response is List<API>");
        }
        
        /// <summary>
        /// Test GetAPIByIdUsingGET1
        /// </summary>
        [Test]
        public void GetAPIByIdUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiId = null;
            //string sensediaAuth = null;
            //string filter = null;
            //var response = instance.GetAPIByIdUsingGET1(apiId, sensediaAuth, filter);
            //Assert.IsInstanceOf<API> (response, "response is API");
        }
        
        /// <summary>
        /// Test GetAPIChangeLogUsingGET1
        /// </summary>
        [Test]
        public void GetAPIChangeLogUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string sensediaAuth = null;
            //var response = instance.GetAPIChangeLogUsingGET1(id, sensediaAuth);
            //Assert.IsInstanceOf<List<ChangeLog>> (response, "response is List<ChangeLog>");
        }
        
        /// <summary>
        /// Test GetAPIsUsingGET1
        /// </summary>
        [Test]
        public void GetAPIsUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //bool? privateAPI = null;
            //string filter = null;
            //var response = instance.GetAPIsUsingGET1(sensediaAuth, privateAPI, filter);
            //Assert.IsInstanceOf<List<API>> (response, "response is List<API>");
        }
        
        /// <summary>
        /// Test NewVersionAPIUsingPOST1
        /// </summary>
        [Test]
        public void NewVersionAPIUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //API apiBean = null;
            //var response = instance.NewVersionAPIUsingPOST1(id, sensediaAuth, apiBean);
            //Assert.IsInstanceOf<APIResponse> (response, "response is APIResponse");
        }
        
        /// <summary>
        /// Test RemoveEnvironmentUsingDELETE1
        /// </summary>
        [Test]
        public void RemoveEnvironmentUsingDELETE1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string environmentId = null;
            //string sensediaAuth = null;
            //var response = instance.RemoveEnvironmentUsingDELETE1(id, environmentId, sensediaAuth);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test UpdateAPIUsingPUT1
        /// </summary>
        [Test]
        public void UpdateAPIUsingPUT1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //API apiBean = null;
            //var response = instance.UpdateAPIUsingPUT1(id, sensediaAuth, apiBean);
            //Assert.IsInstanceOf<APIResponse> (response, "response is APIResponse");
        }
        
        /// <summary>
        /// Test ValidatePartialAPIUsingPOST1
        /// </summary>
        [Test]
        public void ValidatePartialAPIUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //API bean = null;
            //var response = instance.ValidatePartialAPIUsingPOST1(sensediaAuth, bean);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
    }

}
