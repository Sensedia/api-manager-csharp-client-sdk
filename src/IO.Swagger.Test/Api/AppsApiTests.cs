/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AppsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AppsApiTests
    {
        private AppsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AppsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AppsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AppsApi
            //Assert.IsInstanceOfType(typeof(AppsApi), instance, "instance is a AppsApi");
        }

        
        /// <summary>
        /// Test CountUsingGET11
        /// </summary>
        [Test]
        public void CountUsingGET11Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //var response = instance.CountUsingGET11(sensediaAuth);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test DeleteAppTokenUsingDELETE1
        /// </summary>
        [Test]
        public void DeleteAppTokenUsingDELETE1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //instance.DeleteAppTokenUsingDELETE1(id, sensediaAuth);
            
        }
        
        /// <summary>
        /// Test GetAppTokenByAppGalleryUsingGET1
        /// </summary>
        [Test]
        public void GetAppTokenByAppGalleryUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //var response = instance.GetAppTokenByAppGalleryUsingGET1(sensediaAuth);
            //Assert.IsInstanceOf<List<APP>> (response, "response is List<APP>");
        }
        
        /// <summary>
        /// Test GetAppTokenByFilterUsingGET1
        /// </summary>
        [Test]
        public void GetAppTokenByFilterUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //string clientId = null;
            //string name = null;
            //string keyword = null;
            //string status = null;
            //string developer = null;
            //int? actualPage = null;
            //int? pageSize = null;
            //string appIds = null;
            //string beginDate = null;
            //string endDate = null;
            //string extraFields = null;
            //var response = instance.GetAppTokenByFilterUsingGET1(sensediaAuth, clientId, name, keyword, status, developer, actualPage, pageSize, appIds, beginDate, endDate, extraFields);
            //Assert.IsInstanceOf<List<APP>> (response, "response is List<APP>");
        }
        
        /// <summary>
        /// Test GetAppTokenByIdUsingGET1
        /// </summary>
        [Test]
        public void GetAppTokenByIdUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //string sensediaAuth = null;
            //int? limitAccessTokens = null;
            //string codeAccessTokens = null;
            //bool? filterAccessTokens = null;
            //var response = instance.GetAppTokenByIdUsingGET1(code, sensediaAuth, limitAccessTokens, codeAccessTokens, filterAccessTokens);
            //Assert.IsInstanceOf<APP> (response, "response is APP");
        }
        
        /// <summary>
        /// Test GetAppTokenChangeLogUsingGET1
        /// </summary>
        [Test]
        public void GetAppTokenChangeLogUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string sensediaAuth = null;
            //var response = instance.GetAppTokenChangeLogUsingGET1(id, sensediaAuth);
            //Assert.IsInstanceOf<List<ChangeLogBean>> (response, "response is List<ChangeLogBean>");
        }
        
        /// <summary>
        /// Test PostAppTokenUsingPOST1
        /// </summary>
        [Test]
        public void PostAppTokenUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //APP appTokenBean = null;
            //var response = instance.PostAppTokenUsingPOST1(sensediaAuth, appTokenBean);
            //Assert.IsInstanceOf<APPResponse> (response, "response is APPResponse");
        }
        
        /// <summary>
        /// Test PutAppTokenUsingPUT1
        /// </summary>
        [Test]
        public void PutAppTokenUsingPUT1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //APP appTokenBean = null;
            //string sensediaAuth = null;
            //var response = instance.PutAppTokenUsingPUT1(id, appTokenBean, sensediaAuth);
            //Assert.IsInstanceOf<APPResponse> (response, "response is APPResponse");
        }
        
        /// <summary>
        /// Test ValidatePartialAppUsingPOST1
        /// </summary>
        [Test]
        public void ValidatePartialAppUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //APP appTokenBean = null;
            //var response = instance.ValidatePartialAppUsingPOST1(sensediaAuth, appTokenBean);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
