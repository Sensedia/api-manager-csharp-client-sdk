/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccessTokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccessTokensApiTests
    {
        private AccessTokensApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccessTokensApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccessTokensApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccessTokensApi
            //Assert.IsInstanceOfType(typeof(AccessTokensApi), instance, "instance is a AccessTokensApi");
        }

        
        /// <summary>
        /// Test CountUsingGET10
        /// </summary>
        [Test]
        public void CountUsingGET10Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //var response = instance.CountUsingGET10(sensediaAuth);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test RemoveAuthTokenUsingDELETE1
        /// </summary>
        [Test]
        public void RemoveAuthTokenUsingDELETE1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //instance.RemoveAuthTokenUsingDELETE1(id, sensediaAuth);
            
        }
        
        /// <summary>
        /// Test RetrieveAuthTokenChangeLogUsingGET1
        /// </summary>
        [Test]
        public void RetrieveAuthTokenChangeLogUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string sensediaAuth = null;
            //var response = instance.RetrieveAuthTokenChangeLogUsingGET1(id, sensediaAuth);
            //Assert.IsInstanceOf<List<ChangeLogBean>> (response, "response is List<ChangeLogBean>");
        }
        
        /// <summary>
        /// Test RetriveAuthTokenByCodeUsingGET1
        /// </summary>
        [Test]
        public void RetriveAuthTokenByCodeUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //string sensediaAuth = null;
            //var response = instance.RetriveAuthTokenByCodeUsingGET1(code, sensediaAuth);
            //Assert.IsInstanceOf<AccessToken> (response, "response is AccessToken");
        }
        
        /// <summary>
        /// Test RetriveAuthTokenUsingGET1
        /// </summary>
        [Test]
        public void RetriveAuthTokenUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //string code = null;
            //string owner = null;
            //string status = null;
            //long? expiresIn = null;
            //string refreshToken = null;
            //string scope = null;
            //string keyword = null;
            //int? actualPage = null;
            //int? pageSize = null;
            //string authIds = null;
            //string beginDate = null;
            //string endDate = null;
            //string extraFields = null;
            //var response = instance.RetriveAuthTokenUsingGET1(sensediaAuth, code, owner, status, expiresIn, refreshToken, scope, keyword, actualPage, pageSize, authIds, beginDate, endDate, extraFields);
            //Assert.IsInstanceOf<List<AccessToken>> (response, "response is List<AccessToken>");
        }
        
        /// <summary>
        /// Test SaveAuthTokenUsingPOST1
        /// </summary>
        [Test]
        public void SaveAuthTokenUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //AccessToken bean = null;
            //var response = instance.SaveAuthTokenUsingPOST1(sensediaAuth, bean);
            //Assert.IsInstanceOf<AccessToken> (response, "response is AccessToken");
        }
        
        /// <summary>
        /// Test UpdateAuthTokenUsingPUT1
        /// </summary>
        [Test]
        public void UpdateAuthTokenUsingPUT1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //AccessToken bean = null;
            //var response = instance.UpdateAuthTokenUsingPUT1(id, sensediaAuth, bean);
            //Assert.IsInstanceOf<AccessTokenResponse> (response, "response is AccessTokenResponse");
        }
        
        /// <summary>
        /// Test ValidatePartialAccessTokenUsingPOST1
        /// </summary>
        [Test]
        public void ValidatePartialAccessTokenUsingPOST1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //AccessToken bean = null;
            //var response = instance.ValidatePartialAccessTokenUsingPOST1(sensediaAuth, bean);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
