/* 
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CallsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CallsApiTests
    {
        private CallsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CallsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CallsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CallsApi
            //Assert.IsInstanceOfType(typeof(CallsApi), instance, "instance is a CallsApi");
        }

        
        /// <summary>
        /// Test RetrieveCallByIdUsingGET1
        /// </summary>
        [Test]
        public void RetrieveCallByIdUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string sensediaAuth = null;
            //var response = instance.RetrieveCallByIdUsingGET1(id, sensediaAuth);
            //Assert.IsInstanceOf<Call> (response, "response is Call");
        }
        
        /// <summary>
        /// Test RetrieveCallsWithFiltersUsingGET1
        /// </summary>
        [Test]
        public void RetrieveCallsWithFiltersUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensediaAuth = null;
            //int? actualPage = null;
            //string baseUris = null;
            //string appTokenCode = null;
            //int? pageSize = null;
            //string appTokenName = null;
            //string authTokenOwner = null;
            //long? apiId = null;
            //long? operationId = null;
            //long? resourceId = null;
            //long? environmentId = null;
            //long? revisionId = null;
            //string uri = null;
            //string customSearch = null;
            //string method = null;
            //int? httpStatusFrom = null;
            //int? httpStatusTo = null;
            //string beginDate = null;
            //string endDate = null;
            //string appDeveloper = null;
            //string forceDownload = null;
            //var response = instance.RetrieveCallsWithFiltersUsingGET1(sensediaAuth, actualPage, baseUris, appTokenCode, pageSize, appTokenName, authTokenOwner, apiId, operationId, resourceId, environmentId, revisionId, uri, customSearch, method, httpStatusFrom, httpStatusTo, beginDate, endDate, appDeveloper, forceDownload);
            //Assert.IsInstanceOf<CallResponse> (response, "response is CallResponse");
        }
        
        /// <summary>
        /// Test RetrieveTotalCallsByDateUsingGET1
        /// </summary>
        [Test]
        public void RetrieveTotalCallsByDateUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //string sensediaAuth = null;
            //long? apiId = null;
            //var response = instance.RetrieveTotalCallsByDateUsingGET1(date, sensediaAuth, apiId);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
    }

}
